{"version":3,"sources":["../../middlewares/auth.js"],"names":["jwt","require","authMiddleware","req","res","next","token","headers","query","status","json","success","message","p","Promise","resolve","reject","verify","app","get","err","decoded","onError","error","then","catch","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,cAAR,CAAZ;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC;AACA,QAAMC,QAAQH,IAAII,OAAJ,CAAY,gBAAZ,KAAiCJ,IAAIK,KAAJ,CAAUF,KAAzD;;AAEA;AACA,QAAG,CAACA,KAAJ,EAAW;AACP,eAAOF,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS,KADe;AAExBC,qBAAS;AAFe,SAArB,CAAP;AAIH;;AAED;AACA,QAAMC,IAAI,IAAIC,OAAJ,CACN,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjBhB,YAAIiB,MAAJ,CAAWX,KAAX,EAAkBH,IAAIe,GAAJ,CAAQC,GAAR,CAAY,YAAZ,CAAlB,EAA6C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC3D,gBAAGD,GAAH,EAAQJ,OAAOI,GAAP;AACRL,oBAAQM,OAAR;AACH,SAHD;AAIH,KANK,CAAV;;AASA;AACA,QAAMC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACvBnB,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,KADQ;AAEjBC,qBAASW,MAAMX;AAFE,SAArB;AAIH,KALD;;AAOA;AACAC,MAAEW,IAAF,CAAO,UAACH,OAAD,EAAW;AACdlB,YAAIkB,OAAJ,GAAcA,OAAd;AACAhB;AACH,KAHD,EAGGoB,KAHH,CAGSH,OAHT;AAIH,CAnCD;;AAqCAI,OAAOC,OAAP,GAAiBzB,cAAjB","file":"auth.js","sourcesContent":["const jwt = require('jsonwebtoken')\r\n\r\nconst authMiddleware = (req, res, next) => {\r\n    // read the token from header or url\r\n    const token = req.headers['x-access-token'] || req.query.token\r\n\r\n    // token does not exist\r\n    if(!token) {\r\n        return res.status(403).json({\r\n            success: false,\r\n            message: 'not logged in'\r\n        })\r\n    }\r\n\r\n    // create a promise that decodes the token\r\n    const p = new Promise(\r\n        (resolve, reject) => {\r\n            jwt.verify(token, req.app.get('jwt-secret'), (err, decoded) => {\r\n                if(err) reject(err)\r\n                resolve(decoded)\r\n            })\r\n        }\r\n    )\r\n\r\n    // if it has failed to verify, it will return an error message\r\n    const onError = (error) => {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: error.message\r\n        })\r\n    }\r\n\r\n    // process the promise\r\n    p.then((decoded)=>{\r\n        req.decoded = decoded\r\n        next()\r\n    }).catch(onError)\r\n}\r\n\r\nmodule.exports = authMiddleware"]}