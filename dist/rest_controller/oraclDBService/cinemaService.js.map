{"version":3,"sources":["../../../rest_controller/oraclDBService/cinemaService.js"],"names":["dbConfig","require","oracledb","commonUtil","seatService","SeatMaker","seatRowWrapper","rows","seatNames","map","r","rowName","Number","id","i","column","c","seatName","push","cinemaObject","SEAT_NAME","CINEMA_NO","BRCH_ID","SEAT_TYPE_ID","makeSeatNamesByRows","console","log","seatObjectArray","s","makeSeatObject","insertCinema","seatMaker","makeSeatObjectArray","Promise","resolve","reject","getConnection","connectConfig","then","connection","execute","SEAT_CNT","length","FLOOR","autoCommit","firstBatchInsert","result","commit","err","doRelease","catch","error","findAll","outFormat","OBJECT","findCinemaByCinemaNoAndBranchId","close","module","exports"],"mappings":";;;;;;AAAA,IAAMA,WAAWC,QAAQ,+BAAR,CAAjB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,aAAaF,QAAQ,+BAAR,CAAnB;AACA,IAAMG,cAAcH,QAAQ,eAAR,CAApB;;IACMI,S;AACF,yBAAc;AAAA;;AACV,aAAKC,cAAL,GAAsB;AAClB,eAAG,GADe,EACV,GAAG,GADO,EACF,GAAG,GADD,EACM,GAAG,GADT,EACc,GAAG,GADjB,EACsB,GAAG,GADzB,EAC8B,GAAG,GADjC,EACsC,GAAG,GADzC,EAC8C,GAAG,GADjD;AAElB,gBAAI,GAFc,EAET,IAAI,GAFK,EAEA,IAAI,GAFJ,EAES,IAAI,GAFb,EAEkB,IAAI,GAFtB,EAE2B,IAAI,GAF/B,EAEoC,IAAI,GAFxC,EAE6C,IAAI,GAFjD,EAEsD,IAAI,GAF1D;AAGlB,gBAAI,GAHc,EAGT,IAAI,GAHK,EAGA,IAAI,GAHJ,EAGS,IAAI,GAHb,EAGkB,IAAI,GAHtB,EAG2B,IAAI,GAH/B,EAGoC,IAAI,GAHxC,EAG6C,IAAI,GAHjD,EAAtB;AAIH;;;;4CACmBC,I,EAAM;AAAA;;AACtB,gBAAMC,YAAY,EAAlB;AACAD,iBAAKE,GAAL,CAAS,UAACC,CAAD,EAAO;AACZ,oBAAMC,UAAU,MAAKL,cAAL,CAAoBM,OAAOF,EAAEG,EAAT,CAApB,CAAhB;AACA,qBAAI,IAAIC,IAAI,CAAZ,EAAeA,KAAKF,OAAOF,EAAEK,MAAT,CAApB,EAAsCD,GAAtC,EAA2C;AACvC,wBAAME,IAAKF,IAAI,EAAL,GAAW,MAAKA,CAAhB,GAAoB,KAAGA,CAAjC;AACA,wBAAMG,WAAWN,UAAQK,CAAzB;AACAR,8BAAUU,IAAV,CAAeD,QAAf;AACH;AACJ,aAPD;AAQA,mBAAOT,SAAP;AACH;;;uCACeS,Q,EAAUE,Y,EAAc;AACpC,mBAAO,EAACC,WAAWH,QAAZ,EAAsBI,WAAWF,aAAaE,SAA9C;AACHC,yBAASH,aAAaG,OADnB,EAC4BC,cAAcJ,aAAaI,YADvD,EAAP;AAEH;;;4CACoBhB,I,EAAMY,Y,EAAc;AAAA;;AACpC,gBAAMX,YAAY,KAAKgB,mBAAL,CAAyBjB,IAAzB,CAAlB;AACAkB,oBAAQC,GAAR,CAAYlB,SAAZ;AACA,gBAAMmB,kBAAkBnB,UAAUC,GAAV,CAAc,UAACmB,CAAD,EAAO;AACzC,uBAAO,OAAKC,cAAL,CAAoBD,CAApB,EAAuBT,YAAvB,CAAP;AACH,aAFuB,CAAxB;AAGD,mBAAOQ,eAAP;AACH;;;;;;AAEL,SAASG,YAAT,CAAsBX,YAAtB,EAAmC;AAC/B,QAAMZ,OAAOY,aAAaZ,IAA1B;AACA,QAAMwB,YAAY,IAAI1B,SAAJ,EAAlB;AACA,QAAMsB,kBAAkBI,UAAUC,mBAAV,CAA8BzB,IAA9B,EAAoCY,YAApC,CAAxB;AACA,WAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCjC,iBAASkC,aAAT,CAAuBpC,SAASqC,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClB,mBAAOA,WAAWC,OAAX,CAAmB,oEAAnB,EACH,EAACnB,WAAWF,aAAaE,SAAzB,EAAoCC,SAASH,aAAaG,OAA1D,EAAmEmB,UAAUd,gBAAgBe,MAA7F,EAAqGC,OAAOxB,aAAawB,KAAzH,EADG,EAEH,EAACC,YAAY,KAAb,EAFG,EAGFN,IAHE,CAGG;AAAA,uBAAMC,UAAN;AAAA,aAHH,CAAP;AAIH,SANL,EAMOD,IANP,CAMY,UAACC,UAAD,EAAgB;AACxBd,oBAAQC,GAAR,CAAY,cAAZ;AACA,mBAAOtB,YAAYyC,gBAAZ,CAA6BlB,eAA7B,EAA8CY,UAA9C,EACFD,IADE,CACG,UAACQ,MAAD,EAAY;AACdP,2BAAWQ,MAAX,CAAkB,UAACC,GAAD,EAAS;AACvB,wBAAGA,GAAH,EAAQ;AACJvB,gCAAQC,GAAR,CAAY,oBAAZ;AACAS,+BAAOa,GAAP;AACAC,kCAAUV,UAAV;AACA;AACH;AACDU,8BAAUV,UAAV;AACAL,4BAAQ,SAAR;AACH,iBATD;AAUH,aAZE,CAAP;AAaH,SArBD,EAqBGgB,KArBH,CAqBS,UAACC,KAAD,EAAW;AAAChB,mBAAOgB,KAAP,EAAe1B,QAAQC,GAAR,CAAYyB,KAAZ;AAAoB,SArBxD;AAsBH,KAvBM,CAAP;AAwBH;AACD,SAASC,OAAT,GAAmB;AACf,WAAO,IAAInB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCjC,iBAASkC,aAAT,CAAuBpC,SAASqC,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClB,mBAAOA,WAAWC,OAAX,CAAmB,sBAAnB,EAA2C,EAA3C,EAA+C,EAACa,WAAWnD,SAASoD,MAArB,EAA/C,EAA6E,UAACN,GAAD,EAAMF,MAAN,EAAiB;AACjG,oBAAGE,GAAH,EAAQ;AACJvB,4BAAQC,GAAR,CAAY,oBAAZ,EAAkCsB,GAAlC;AACAC,8BAAUV,UAAV;AACAJ,2BAAOa,GAAP;AACH;AACDC,0BAAUV,UAAV;AACAL,wBAAQY,OAAOvC,IAAf;AACH,aARM,CAAP;AASH,SAXL,EAWO2C,KAXP,CAWa,UAACC,KAAD,EAAW;AAAC1B,oBAAQC,GAAR,CAAY,qBAAZ;AAAmC,SAX5D;AAYH,KAbM,CAAP;AAcH;AACD,SAAS6B,+BAAT,CAAyClC,SAAzC,EAAoDC,OAApD,EAA6D;AACzD,WAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCjC,iBAASkC,aAAT,CAAuBpC,SAASqC,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClB,mBAAOA,WAAWC,OAAX,CAAmB,0EAAnB,EACH,EAACnB,WAAWA,SAAZ,EAAuBC,SAASA,OAAhC,EADG,EAED,EAAC+B,WAAWnD,SAASoD,MAArB,EAFC,EAE6B,UAACN,GAAD,EAAMF,MAAN,EAAiB;AACjD,oBAAGE,GAAH,EAAQ;AACJvB,4BAAQC,GAAR,CAAY,oBAAZ,EAAkCsB,GAAlC;AACAC,8BAAUV,UAAV;AACAJ,2BAAOa,GAAP;AACH;AACDC,0BAAUV,UAAV;AACAL,wBAAQY,OAAOvC,IAAf;AACH,aAVM,CAAP;AAWH,SAbL,EAaO2C,KAbP,CAaa,UAACC,KAAD,EAAW;AAAC1B,oBAAQC,GAAR,CAAY,qBAAZ;AAAmC,SAb5D;AAcH,KAfM,CAAP;AAgBH;AACD,SAASuB,SAAT,CAAmBV,UAAnB,EAA+B;AAC3B,WAAOA,WAAWiB,KAAX,CAAiB,UAACR,GAAD,EAAS;AAC7B,YAAGA,GAAH,EAAQ;AACJvB,oBAAQC,GAAR,CAAYsB,GAAZ;AACH;AACJ,KAJM,CAAP;AAKH;AACDS,OAAOC,OAAP,GAAiB;AACb5B,kBAAcA,YADD;AAEbsB,aAASA,OAFI;AAGbG;AAHa,CAAjB","file":"cinemaService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst seatService = require('./seatService');\r\nclass SeatMaker{\r\n    constructor() {\r\n        this.seatRowWrapper = {\r\n            1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F', 7: 'G', 8: 'F', 9: 'I',\r\n            10: 'J', 11: 'K', 12: 'L', 13: 'M', 14: 'N', 15: 'O', 16: 'P', 17: 'Q', 18: 'R',\r\n            19: 'S', 20: 'T', 21: 'U', 22: 'V', 23: 'W', 24: 'X', 25: 'Y', 26: 'Z'};\r\n    }\r\n    makeSeatNamesByRows(rows) {\r\n        const seatNames = [];\r\n        rows.map((r) => {\r\n            const rowName = this.seatRowWrapper[Number(r.id)];\r\n            for(let i = 1; i <= Number(r.column); i++) {\r\n                const c = (i < 10) ? '0'+ i : ''+i;\r\n                const seatName = rowName+c;\r\n                seatNames.push(seatName);\r\n            }\r\n        })\r\n        return seatNames;\r\n    }\r\n     makeSeatObject(seatName, cinemaObject) {\r\n        return {SEAT_NAME: seatName, CINEMA_NO: cinemaObject.CINEMA_NO,\r\n            BRCH_ID: cinemaObject.BRCH_ID, SEAT_TYPE_ID: cinemaObject.SEAT_TYPE_ID};\r\n    }\r\n     makeSeatObjectArray(rows, cinemaObject) {\r\n         const seatNames = this.makeSeatNamesByRows(rows);\r\n         console.log(seatNames);\r\n         const seatObjectArray = seatNames.map((s) => {\r\n             return this.makeSeatObject(s, cinemaObject);\r\n         })\r\n        return seatObjectArray;\r\n    }\r\n}\r\nfunction insertCinema(cinemaObject){\r\n    const rows = cinemaObject.rows;\r\n    const seatMaker = new SeatMaker();\r\n    const seatObjectArray = seatMaker.makeSeatObjectArray(rows, cinemaObject);\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('INSERT INTO CINEMA VALUES(:CINEMA_NO, :BRCH_ID, :SEAT_CNT, :FLOOR)',\r\n                    {CINEMA_NO: cinemaObject.CINEMA_NO, BRCH_ID: cinemaObject.BRCH_ID, SEAT_CNT: seatObjectArray.length, FLOOR: cinemaObject.FLOOR},\r\n                    {autoCommit: false})\r\n                    .then(() => connection)\r\n            }).then((connection) => {\r\n            console.log('we are groot');\r\n            return seatService.firstBatchInsert(seatObjectArray, connection)\r\n                .then((result) => {\r\n                    connection.commit((err) => {\r\n                        if(err) {\r\n                            console.log('error while commit');\r\n                            reject(err);\r\n                            doRelease(connection);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve('success');\r\n                    })\r\n                })\r\n        }).catch((error) => {reject(error); console.log(error);});\r\n    })\r\n}\r\nfunction findAll() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT * FROM CINEMA', [], {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        console.log('error while select', err);\r\n                        doRelease(connection);\r\n                        reject(err);\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((error) => {console.log('catch error outside')});\r\n    })\r\n}\r\nfunction findCinemaByCinemaNoAndBranchId(CINEMA_NO, BRCH_ID) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT * FROM CINEMA WHERE CINEMA_NO = :CINEMA_NO AND BRCH_ID = :BRCH_ID',\r\n                    {CINEMA_NO: CINEMA_NO, BRCH_ID: BRCH_ID}\r\n                    , {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        console.log('error while select', err);\r\n                        doRelease(connection);\r\n                        reject(err);\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((error) => {console.log('catch error outside')});\r\n    })\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\nmodule.exports = {\r\n    insertCinema: insertCinema,\r\n    findAll: findAll,\r\n    findCinemaByCinemaNoAndBranchId\r\n}"]}