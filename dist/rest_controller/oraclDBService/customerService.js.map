{"version":3,"sources":["../../../rest_controller/oraclDBService/customerService.js"],"names":["oracledb","require","dbConfig","commonUtil","insertCustomerStep","connection","userDataObject","resolve","reject","execute","IS_USER","PHONE","USER_NAME","outFormat","OBJECT","autoCommit","then","result","insertUserStep","USER_ID","ZIP_CODE","ADDR","ADDR_DET","EMAIL","BIRTH","PASSWORD","SALT","error","commit","err","console","log","doRelease","registerUser","Promise","conn","findCustomerInfoOfUserByNameAndPhone","data","length","getConnection","connectConfig","catch","registerNonUser","nonUserDataObject","findCustomerAPI","rows","findAllUser","userIdCheck","id","findUserById","close","findUserByCustomerId","cid","CUST_ID","findCustomerByNameAndPhone","name","phone","findNonUserCustomerByNameAndPhone","updatePointOfUser","customerId","point","operator","sql","updatePointOfUserExecute","findNonUserCustomerByCustomerId","module","exports","findCustomers"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,WAAWD,QAAQ,+BAAR,CAAf;AACA,IAAME,aAAaF,QAAQ,+BAAR,CAAnB;AACA,SAASG,kBAAT,CAA4BC,UAA5B,EAAwCC,cAAxC,EAAwDC,OAAxD,EAAiEC,MAAjE,EAAwE;AACpE,WAAOH,WAAWI,OAAX,CAAmB,iFAAnB,EACH,EAACC,SAAS,GAAV,EAAeC,OAAOL,eAAeK,KAArC,EAA4CC,WAAWN,eAAeM,SAAtE,EADG,EAC+E,EAAEC,WAAWb,SAASc,MAAtB,EAA8BC,YAAY,KAA1C,EAD/E,EAEFC,IAFE,CAEG,UAACC,MAAD;AAAA,eAAYZ,UAAZ;AAAA,KAFH,CAAP;AAGH;AACD,SAASa,cAAT,CAAwBb,UAAxB,EAAoCC,cAApC,EAAoDC,OAApD,EAA6DC,MAA7D,EAAqE;AACjE,WAAOH,WAAWI,OAAX,CAAmB,kGACtB,wGADG,EAEH,EAACU,SAASb,eAAea,OAAzB,EAAkCC,UAAUd,eAAec,QAA3D,EAAqEC,MAAMf,eAAee,IAA1F,EAAgGC,UAAShB,eAAegB,QAAxH;AACKC,eAAOjB,eAAeiB,KAD3B,EACkCC,OAAOlB,eAAekB,KADxD,EAC+DC,UAAUnB,eAAemB,QADxF,EACkGC,MAAMpB,eAAeoB,IADvH,EAFG,EAIH,EAAEb,WAAWb,SAASc,MAAtB,EAA8BC,YAAY,KAA1C,EAJG,EAI+C,UAACY,KAAD,EAAQV,MAAR,EAAmB;AACjE,YAAGU,KAAH,EAAU;AACNnB,mBAAOmB,KAAP;AACA,mBAAO,gBAAP;AACH;AACDtB,mBAAWuB,MAAX,CAAkB,UAACC,GAAD,EAAS;AACvB,gBAAGA,GAAH,EAAQ;AACJC,wBAAQC,GAAR,CAAY,YAAZ,EAAyBF,GAAzB;AACAG,0BAAU3B,UAAV;AACAG,uBAAO,oBAAP,EAA6BqB,GAA7B;AACA;AACH;AACDG,sBAAU3B,UAAV;AACAE,oBAAQ,SAAR;AACH,SATD;AAUH,KAnBE,CAAP;AAoBH;AACD,SAAS0B,YAAT,CAAsB3B,cAAtB,EAAsC;AAClC,WAAO,IAAI4B,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI2B,aAAJ;AACAC,6CAAqC9B,eAAeM,SAApD,EAA+DN,eAAeK,KAA9E,EACKK,IADL,CACU,UAACqB,IAAD,EAAU;AACZ,gBAAGA,KAAKC,MAAL,KAAgB,CAAnB,EAAuB;AACnBtC,yBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB8B,2BAAO9B,UAAP;AACA,2BAAOD,mBAAmBC,UAAnB,EAA+BC,cAA/B,EAA+CC,OAA/C,EAAwDC,MAAxD,CAAP;AACH,iBAJL,EAIOQ,IAJP,CAIY,UAACX,UAAD,EAAgB;AACxB,2BAAOa,eAAeb,UAAf,EAA2BC,cAA3B,EAA2CC,OAA3C,EAAoDC,MAApD,CAAP;AACH,iBAND,EAMGiC,KANH,CAMS,UAACd,KAAD,EAAW;AAChBG,4BAAQC,GAAR,CAAYJ,KAAZ;AACA,wBAAGQ,IAAH,EAAS;AACLH,kCAAUG,IAAV;AACH;AACJ,iBAXD;AAYH,aAbD,MAaO;AACH3B,uBAAO,SAAP;AACH;AACJ,SAlBL,EAkBOiC,KAlBP,CAkBa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ;AAAmC,SAlB5D;AAoBH,KAtBM,EAsBJU,KAtBI,CAsBE,UAACd,KAAD,EAAW;AAACG,gBAAQC,GAAR,CAAY,gBAAZ,EAA8BJ,KAA9B;AAAqC,KAtBnD,CAAP;AAuBH;AACD,SAASe,eAAT,CAAyBC,iBAAzB,EAA4C;AACxC,WAAO,IAAIT,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI2B,aAAJ;AACAnC,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,CAAmB,iFAAnB,EACH,EAACC,SAAS,GAAV,EAAeC,OAAOgC,kBAAkBhC,KAAxC,EAA+CC,WAAW+B,kBAAkB/B,SAA5E,EADG,EACqF,EAAEC,WAAWb,SAASc,MAAtB,EAA8BC,YAAY,IAA1C,EADrF,CAAP;AAEH,SAJL,EAIOC,IAJP,CAIY,UAACC,MAAD,EAAY;AACpBV,oBAAQoC,iBAAR;AACH,SAND,EAMGF,KANH,CAMS,UAACd,KAAD,EAAW;AAChBnB,mBAAOmB,KAAP;AACH,SARD;AASH,KAXM,CAAP;AAYH;AACD,SAASiB,eAAT,GAA2B;AACvB,WAAO,IAAIV,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EAA+C,UAACX,GAAD,EAAMxB,UAAN,EAAqB;AAChE,gBAAGwB,GAAH,EAAQ;AACJC,wBAAQC,GAAR,CAAY,aAAZ;AACA;AACH;AACD1B,uBAAWI,OAAX,CAAmB,wBAAnB,EACI,EADJ,EAEI,EAAEI,WAAWb,SAASc,MAAtB,EAFJ,EAEkC,UAACa,KAAD,EAAQV,MAAR,EAAmB;AAC7CV,wBAAQU,OAAO4B,IAAf;AACA,oBAAGlB,KAAH,EAAU;AACNnB,2BAAOmB,KAAP;AACA,2BAAO,wBAAP;AACH;AAEJ,aATL;AAUH,SAfD;AAgBH,KAjBM,CAAP;AAkBH;AACD,SAASmB,WAAT,GAAuB;AACnB,WAAO,IAAIZ,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EAA+C,UAACX,GAAD,EAAMxB,UAAN,EAAqB;AAChEA,uBAAWI,OAAX,CAAmB,qBAAnB,EAA0C,EAA1C,EAA8C,EAACI,WAAWb,SAASc,MAArB,EAA9C,EAA4E,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACzF,oBAAGY,GAAH,EAAQ;AACJG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA,2BAAO,OAAP;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aARD;AASH,SAVD;AAWH,KAZM,CAAP;AAaH;AACD,SAASE,WAAT,CAAqBC,EAArB,EAAyB;AACrB,WAAO,IAAId,OAAJ,CAAY,UAAC3B,OAAD,EAASC,MAAT,EAAoB;AACnCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClBA,uBAAWI,OAAX,CAAmB,8CAAnB,EAAmE,EAACU,SAAS6B,EAAV,EAAnE,EAAkF,EAAEnC,WAAWb,SAASc,MAAtB,EAAlF,EACKE,IADL,CACU,UAACC,MAAD,EAAY;AACdV,wBAAQU,OAAO4B,IAAf;AACP,aAHD,EAGGJ,KAHH,CAGS,UAACd,KAAD,EAAW;AAChBG,wBAAQC,GAAR,CAAY,wBAAZ,EAAsCJ,KAAtC;AACAnB,uBAAO,OAAP;AACH,aAND;AAOH,SATL,EASOiC,KATP,CASa,UAACd,KAAD,EAAW;AAChBG,oBAAQC,GAAR,CAAY,wBAAZ,EAAsCJ,KAAtC;AACH,SAXL;AAYH,KAbM,CAAP;AAcH;AACD,SAASsB,YAAT,CAAsBD,EAAtB,EAA0B;AACtB,QAAIb,aAAJ;AACA,WAAO,IAAID,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AAChCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB8B,mBAAO9B,UAAP;AACA,mBAAOA,WAAWI,OAAX,CAAmB,0EAAnB,EAA+F,EAACU,SAAS6B,EAAV,EAA/F,EAA8G,EAACnC,WAAWb,SAASc,MAArB,EAA9G,EACFE,IADE,CACG,UAACC,MAAD;AAAA,uBAAYV,QAAQU,OAAO4B,IAAf,CAAZ;AAAA,aADH,EAEFJ,KAFE,CAEI,UAACd,KAAD,EAAW;AACdG,wBAAQC,GAAR,CAAY,sBAAZ,EAAoCJ,KAApC;AACAnB,uBAAO,OAAP;AACH,aALE,CAAP;AAMH,SATL,EASOQ,IATP,CASY,YAAM;AAAC,gBAAGmB,IAAH,EAAS;AAAC,uBAAOA,KAAKe,KAAL,EAAP;AAAoB;AAAC,SATlD,EASoDT,KATpD,CAS0D,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAThH;AAUH,KAXE,EAYLc,KAZK,CAYC,UAACd,KAAD,EAAW;AAACG,gBAAQC,GAAR,CAAY,wBAAZ,EAAsCJ,KAAtC;AAA6C,KAZ1D,CAAP;AAaH;AACD,SAASwB,oBAAT,CAA8BC,GAA9B,EAAkC;AAC9B,WAAO,IAAIlB,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AAChCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,CAAmB,4FAAnB,EAAiH,EAAC4C,SAASD,GAAV,EAAjH,EAAiI,EAACvC,WAAWb,SAASc,MAArB,EAAjI,EACH,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJG,8BAAU3B,UAAV;AACAyB,4BAAQC,GAAR,CAAYF,GAAZ;AACArB,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aAVE,CAAP;AAWH,SAbL,EAaOJ,KAbP,CAaa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAbnE;AAcH,KAfE,CAAP;AAiBH;AACD,SAAS2B,0BAAT,CAAoCC,IAApC,EAA0CC,KAA1C,EAAgD;AAC5C,WAAO,IAAItB,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,CAAmB,wEAAnB,EAA6F,EAACG,WAAW2C,IAAZ,EAAkB5C,OAAO6C,KAAzB,EAA7F,EAA8H,EAAC3C,WAAWb,SAASc,MAArB,EAA9H,EACH,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJC,4BAAQC,GAAR,CAAYF,GAAZ;AACAG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aAVE,CAAP;AAWH,SAbL,EAaOJ,KAbP,CAaa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAbnE;AAcH,KAfM,CAAP;AAgBH;AACD,SAAS8B,iCAAT,CAA2CF,IAA3C,EAAiDC,KAAjD,EAAuD;AACnD,WAAO,IAAItB,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,CAAmB,0FAAnB,EAA+G,EAACG,WAAW2C,IAAZ,EAAkB5C,OAAO6C,KAAzB,EAA/G,EAAgJ,EAAC3C,WAAWb,SAASc,MAArB,EAAhJ,EACH,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJC,4BAAQC,GAAR,CAAYF,GAAZ;AACAG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aAVE,CAAP;AAWH,SAbL,EAaOJ,KAbP,CAaa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAbnE;AAcH,KAfM,CAAP;AAgBH;;AAED,SAASS,oCAAT,CAA8CmB,IAA9C,EAAoDC,KAApD,EAA0D;AACtD,WAAO,IAAItB,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,+FAA+G,EAACG,WAAW2C,IAAZ,EAAkB5C,OAAO6C,KAAzB,EAA/G,EAAgJ,EAAC3C,WAAWb,SAASc,MAArB,EAAhJ,EACH,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJC,4BAAQC,GAAR,CAAYF,GAAZ;AACAG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aAVE,CAAP;AAWH,SAbL,EAaOJ,KAbP,CAaa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAbnE;AAcH,KAfM,CAAP;AAgBH;;AAED,SAAS+B,iBAAT,CAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,QAA9C,EAAwD;AACpD,WAAO,IAAI3B,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,gBAAIyD,YAAJ;AACA,gBAAGD,QAAH,EAAa;AACTC,0DAAwCD,QAAxC,SAAoDD,KAApD;AACH,aAFD,MAEM;AACFE,oDAAkCF,KAAlC;AACH;AACD,mBAAOvD,WAAWI,OAAX,CAAmBqD,GAAnB,EAAwB,EAACT,SAASM,UAAV,EAAxB,EAA+C,EAAC9C,WAAWb,SAASc,MAArB,EAA6BC,YAAY,IAAzC,EAA/C,EACH,UAACc,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJC,4BAAQC,GAAR,CAAYF,GAAZ;AACAG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQ,SAAR;AACH,aAVE,CAAP;AAWH,SAnBL,EAmBOkC,KAnBP,CAmBa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAnBnE;AAoBH,KArBM,CAAP;AAsBH;AACD,SAASoC,wBAAT,CAAkC1D,UAAlC,EAA6CsD,UAA7C,EAAwDC,KAAxD,EAA8DC,QAA9D,EAAwE;AACpE,QAAIC,YAAJ;AACA,QAAGD,QAAH,EAAa;AACTC,kDAAwCD,QAAxC,SAAoDD,KAApD;AACH,KAFD,MAEM;AACFE,4CAAkCF,KAAlC;AACH;AACD9B,YAAQC,GAAR,CAAY+B,GAAZ;AACA,WAAOzD,WAAWI,OAAX,CAAmBqD,GAAnB,EAAwB,EAACT,SAASM,UAAV,EAAxB,EAA+C,EAAC9C,WAAWb,SAASc,MAArB,EAA6BC,YAAY,KAAzC,EAA/C,EAAgGC,IAAhG,CAAqG,UAACC,MAAD;AAAA,eAAYZ,UAAZ;AAAA,KAArG,CAAP;AACH;;AAED,SAAS2D,+BAAT,CAAyCL,UAAzC,EAAqD;AACjD,WAAO,IAAIzB,OAAJ,CAAY,UAAC3B,OAAD,EAAUC,MAAV,EAAqB;AACpCR,iBAASuC,aAAT,CAAuBrC,SAASsC,aAAhC,EACKxB,IADL,CACU,UAACX,UAAD,EAAgB;AAClB,mBAAOA,WAAWI,OAAX,wEAAwF,EAAC4C,SAASM,UAAV,EAAxF,EAA+G,EAAC9C,WAAWb,SAASc,MAArB,EAA/G,EACH,UAACe,GAAD,EAAMZ,MAAN,EAAiB;AACb,oBAAGY,GAAH,EAAQ;AACJC,4BAAQC,GAAR,CAAYF,GAAZ;AACAG,8BAAU3B,UAAV;AACAG,2BAAOqB,GAAP;AACA;AACH;AACDG,0BAAU3B,UAAV;AACAE,wBAAQU,OAAO4B,IAAf;AACH,aAVE,CAAP;AAWH,SAbL,EAaOJ,KAbP,CAaa,UAACd,KAAD,EAAW;AAACG,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,KAAnC;AAA0C,SAbnE;AAcH,KAfM,CAAP;AAgBH;;AAED,SAASK,SAAT,CAAmB3B,UAAnB,EAA+B;AAC3B,WAAOA,WAAW6C,KAAX,CAAiB,UAACrB,GAAD,EAAS;AAC7B,YAAGA,GAAH,EAAQ;AACJC,oBAAQC,GAAR,CAAYF,GAAZ;AACH;AACJ,KAJM,CAAP;AAKH;AACDoC,OAAOC,OAAP,GAAiB;AACbjC,kBAAcA,YADD;AAEbkC,mBAAevB,eAFF;AAGbG,iBAAaA,WAHA;AAIbE,kBAAcA,YAJD;AAKbK,gCAA4BA,0BALf;AAMbG,wEANa;AAObf,oCAPa;AAQbS,8CARa;AASbO,wCATa;AAUbK,sDAVa;AAWbC,oEAXa;AAYblB;AAZa,CAAjB","file":"customerService.js","sourcesContent":["var oracledb = require('oracledb');\r\nvar dbConfig = require('../../config/oracle-db-config');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nfunction insertCustomerStep(connection, userDataObject, resolve, reject){\r\n    return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n        {IS_USER: 'Y', PHONE: userDataObject.PHONE, USER_NAME: userDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: false })\r\n        .then((result) => connection)\r\n}\r\nfunction insertUserStep(connection, userDataObject, resolve, reject) {\r\n    return connection.execute(\"INSERT INTO USERS (USER_ID, ZIP_CODE, ADDR, ADDR_DET, EMAIL, BIRTH, CUST_ID, PASSWORD, SALT) \" +\r\n        \"VALUES(:USER_ID, :ZIP_CODE, :ADDR, :ADDR_DET, :EMAIL, :BIRTH, CUSTOMER_SEQ.CURRVAL , :PASSWORD, :SALT)\",\r\n        {USER_ID: userDataObject.USER_ID, ZIP_CODE: userDataObject.ZIP_CODE, ADDR: userDataObject.ADDR, ADDR_DET:userDataObject.ADDR_DET\r\n            ,EMAIL: userDataObject.EMAIL, BIRTH: userDataObject.BIRTH, PASSWORD: userDataObject.PASSWORD, SALT: userDataObject.SALT},\r\n        { outFormat: oracledb.OBJECT, autoCommit: false },(error, result) => {\r\n            if(error) {\r\n                reject(error);\r\n                return 'error is there';\r\n            }\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    console.log('error step',err);\r\n                    doRelease(connection);\r\n                    reject('error while commit', err);\r\n                    return;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            });\r\n        })\r\n}\r\nfunction registerUser(userDataObject) {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        findCustomerInfoOfUserByNameAndPhone(userDataObject.USER_NAME, userDataObject.PHONE)\r\n            .then((data) => {\r\n                if(data.length === 0 ) {\r\n                    oracledb.getConnection(dbConfig.connectConfig)\r\n                        .then((connection) => {\r\n                            conn = connection\r\n                            return insertCustomerStep(connection, userDataObject, resolve, reject);\r\n                        }).then((connection) => {\r\n                        return insertUserStep(connection, userDataObject, resolve, reject);\r\n                    }).catch((error) => {\r\n                        console.log(error);\r\n                        if(conn) {\r\n                            doRelease(conn);\r\n                        }\r\n                    })\r\n                } else {\r\n                    reject('ALREADY');\r\n                }\r\n            }).catch((error) => {console.log('find customer Error')});\r\n\r\n    }).catch((error) => {console.log('error the fuck', error)});\r\n}\r\nfunction registerNonUser(nonUserDataObject) {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n                    {IS_USER: 'N', PHONE: nonUserDataObject.PHONE, USER_NAME: nonUserDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: true });\r\n            }).then((result) => {\r\n            resolve(nonUserDataObject);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        })\r\n    });\r\n}\r\nfunction findCustomerAPI() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig, (err, connection) => {\r\n            if(err) {\r\n                console.log('hello Error');\r\n                return;\r\n            }\r\n            connection.execute(\"SELECT * FROM CUSTOMER\",\r\n                [],\r\n                { outFormat: oracledb.OBJECT},(error, result) => {\r\n                    resolve(result.rows);\r\n                    if(error) {\r\n                        reject(error);\r\n                        return 'error is there fucking';\r\n                    }\r\n\r\n                });\r\n        })\r\n    })\r\n}\r\nfunction findAllUser() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig, (err, connection) => {\r\n            connection.execute('SELECT * from USERS', [], {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    reject(err);\r\n                    return 'error';\r\n                }\r\n                doRelease(connection);\r\n                resolve(result.rows);\r\n            })\r\n        })\r\n    })\r\n}\r\nfunction userIdCheck(id) {\r\n    return new Promise((resolve,reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('SELECT 1 FROM USERS WHERE USER_ID = :USER_ID', {USER_ID: id}, { outFormat: oracledb.OBJECT })\r\n                    .then((result) => {\r\n                        resolve(result.rows);\r\n                }).catch((error) => {\r\n                    console.log('has error while select', error);\r\n                    reject('error');\r\n                });\r\n            }).catch((error) => {\r\n                console.log('error while Connection', error);\r\n            })\r\n    })\r\n}\r\nfunction findUserById(id) {\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    conn = connection;\r\n                    return connection.execute('SELECT * FROM USERS U NATURAL JOIN CUSTOMER C WHERE U.USER_ID = :USER_ID', {USER_ID: id}, {outFormat: oracledb.OBJECT})\r\n                        .then((result) => resolve(result.rows))\r\n                        .catch((error) => {\r\n                            console.log('error while findUser', error);\r\n                            reject('error');\r\n                        })\r\n                }).then(() => {if(conn) {return conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    ).catch((error) => {console.log('error of outer Promise', error)});\r\n}\r\nfunction findUserByCustomerId(cid){\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    return connection.execute('SELECT * FROM USERS U JOIN CUSTOMER C ON(U.CUST_ID = C.CUST_ID) WHERE C.CUST_ID = :CUST_ID', {CUST_ID: cid}, {outFormat: oracledb.OBJECT},\r\n                        (err, result) => {\r\n                            if(err) {\r\n                                doRelease(connection);\r\n                                console.log(err);\r\n                                reject(err);\r\n                                return;\r\n                            }\r\n                            doRelease(connection);\r\n                            resolve(result.rows);\r\n                        })\r\n                }).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    )\r\n}\r\nfunction findCustomerByNameAndPhone(name, phone){\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE', {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            }).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\nfunction findNonUserCustomerByNameAndPhone(name, phone){\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(\"SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE AND IS_USER = 'N'\", {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            }).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\n\r\nfunction findCustomerInfoOfUserByNameAndPhone(name, phone){\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(`SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE AND IS_USER = 'Y'`, {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection)\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows)\r\n                    });\r\n            }).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\n\r\nfunction updatePointOfUser(customerId, point, operator) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                let sql;\r\n                if(operator) {\r\n                    sql = `UPDATE USERS SET POINT = POINT ${operator} ${point} WHERE CUST_ID = :CUST_ID`;\r\n                }else {\r\n                    sql = `UPDATE USERS SET POINT = ${point} WHERE CUST_ID = :CUST_ID`;\r\n                }\r\n                return connection.execute(sql, {CUST_ID: customerId}, {outFormat: oracledb.OBJECT, autoCommit: true},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection)\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve('success');\r\n                    });\r\n            }).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\nfunction updatePointOfUserExecute(connection,customerId,point,operator) {\r\n    let sql;\r\n    if(operator) {\r\n        sql = `UPDATE USERS SET POINT = POINT ${operator} ${point} WHERE CUST_ID = :CUST_ID`;\r\n    }else {\r\n        sql = `UPDATE USERS SET POINT = ${point} WHERE CUST_ID = :CUST_ID`;\r\n    }\r\n    console.log(sql);\r\n    return connection.execute(sql, {CUST_ID: customerId}, {outFormat: oracledb.OBJECT, autoCommit: false}).then((result) => connection);\r\n}\r\n\r\nfunction findNonUserCustomerByCustomerId(customerId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(`SELECT * FROM CUSTOMER WHERE CUST_ID = :CUST_ID AND IS_USER = 'N'`, {CUST_ID: customerId}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection)\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows)\r\n                    });\r\n            }).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\n\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\nmodule.exports = {\r\n    registerUser: registerUser,\r\n    findCustomers: findCustomerAPI,\r\n    userIdCheck: userIdCheck,\r\n    findUserById: findUserById,\r\n    findCustomerByNameAndPhone: findCustomerByNameAndPhone,\r\n    findNonUserCustomerByNameAndPhone,\r\n    registerNonUser,\r\n    findUserByCustomerId,\r\n    updatePointOfUser,\r\n    updatePointOfUserExecute,\r\n    findNonUserCustomerByCustomerId,\r\n    findAllUser\r\n}"]}