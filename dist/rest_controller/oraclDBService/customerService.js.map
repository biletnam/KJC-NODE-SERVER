{"version":3,"sources":["../../../rest_controller/oraclDBService/customerService.js"],"names":["oracledb","require","dbConfig","commonUtil","registerUser","userDataObject","Promise","resolve","reject","conn","findCustomerByNameAndPhone","USER_NAME","PHONE","then","data","length","getConnection","connectConfig","connection","execute","IS_USER","outFormat","OBJECT","autoCommit","result","USER_ID","ZIP_CODE","ADDR","ADDR_DET","EMAIL","BIRTH","PASSWORD","SALT","error","commit","err","console","log","close","catch","registerNonUser","nonUserDataObject","findCustomerAPI","rows","userIdCheck","id","findUserById","findUserByCustomerId","cid","CUST_ID","name","phone","module","exports","findCustomers"],"mappings":"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","file":"customerService.js","sourcesContent":["var oracledb = require('oracledb');\r\nvar dbConfig = require('../../config/oracle-db-config');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst registerUser = (userDataObject) => {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        this.findCustomerByNameAndPhone(userDataObject.USER_NAME, userDataObject.PHONE)\r\n            .then((data) => {\r\n                if(data.length === 0 ) {\r\n                    oracledb.getConnection(dbConfig.connectConfig)\r\n                        .then((connection) => {\r\n                            return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n                                {IS_USER: 'Y', PHONE: userDataObject.PHONE, USER_NAME: userDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: false });\r\n                        }).then((result) => {connection}).then((connection) => {\r\n                        conn = connection;\r\n                        return connection.execute(\"INSERT INTO USERS (USER_ID, ZIP_CODE, ADDR, ADDR_DET, EMAIL, BIRTH, CUST_ID, PASSWORD, SALT) \" +\r\n                            \"VALUES(:USER_ID, :ZIP_CODE, :ADDR, :ADDR_DET, :EMAIL, :BIRTH, CUSTOMER_SEQ.CURRVAL , :PASSWORD, :SALT)\",\r\n                            {USER_ID: userDataObject.USER_ID, ZIP_CODE: userDataObject.ZIP_CODE, ADDR: userDataObject.ADDR, ADDR_DET:userDataObject.ADDR_DET\r\n                                ,EMAIL: userDataObject.EMAIL, BIRTH: userDataObject.BIRTH, PASSWORD: userDataObject.PASSWORD, SALT: userDataObject.SALT},\r\n                            { outFormat: oracledb.OBJECT, autoCommit: false },(error, result) => {\r\n                                if(error) {\r\n                                    reject(error);\r\n                                    return 'error is there';\r\n                                }\r\n                                connection.commit((err) => {\r\n                                    if(err) {\r\n                                        console.log(err);\r\n                                        reject('error while commit', err);\r\n                                        return;\r\n                                    }\r\n                                    resolve('success');\r\n                                });\r\n                            })\r\n                    }).then(() => {if(conn) { return conn.close()}}).catch((error) => {console.log('connectionError' , error)});\r\n                }\r\n            }).catch((error) => {console.log('find customer Error')});\r\n\r\n    }).catch((error) => {console.log('error')});\r\n}\r\nconst registerNonUser = (nonUserDataObject) => {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n                    {IS_USER: 'N', PHONE: nonUserDataObject.PHONE, USER_NAME: nonUserDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: true });\r\n            }).then((result) => {\r\n            resolve(nonUserDataObject);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        })\r\n    });\r\n}\r\nconst findCustomerAPI = () => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig, (err, connection) => {\r\n            if(err) {\r\n                console.log('hello Error');\r\n                return;\r\n            }\r\n            connection.execute(\"SELECT * FROM CUSTOMER\",\r\n                [],\r\n                { outFormat: oracledb.OBJECT},(error, result) => {\r\n                    resolve(result.rows);\r\n                    if(error) {\r\n                        reject(error);\r\n                        return 'error is there fucking';\r\n                    }\r\n\r\n                });\r\n        })\r\n    })\r\n}\r\nconst userIdCheck = (id) => {\r\n    return new Promise((resolve,reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('SELECT 1 FROM USERS WHERE USER_ID = :USER_ID', {USER_ID: id}, { outFormat: oracledb.OBJECT })\r\n                    .then((result) => {\r\n                        resolve(result.rows);\r\n                }).catch((error) => {\r\n                    console.log('has error while select', error);\r\n                    reject('error');\r\n                });\r\n            }).catch((error) => {\r\n                console.log('error while Connection', error);\r\n            })\r\n    })\r\n}\r\nconst findUserById = (id) => {\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    conn = connection;\r\n                    return connection.execute('SELECT * FROM USERS U NATURAL JOIN CUSTOMER C WHERE U.USER_ID = :USER_ID', {USER_ID: id}, {outFormat: oracledb.OBJECT})\r\n                        .then((result) => resolve(result.rows))\r\n                        .catch((error) => {\r\n                            console.log('error while findUser', error);\r\n                            reject('error');\r\n                        })\r\n                }).then(() => {if(conn) {conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    ).catch((error) => {console.log('error of outer Promise', error)});\r\n}\r\nconst findUserByCustomerId = (cid) => {\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    conn = connection;\r\n                    return connection.execute('SELECT * FROM USERS U JOIN CUSTOMER C ON(U.CUST_ID = C.CUST_ID) WHERE C.CUST_ID = :CUST_ID', {CUST_ID: cid}, {outFormat: oracledb.OBJECT})\r\n                        .then((result) => resolve(result.rows))\r\n                        .catch((error) => {\r\n                            console.log('error while findUser', error);\r\n                            reject('error');\r\n                        })\r\n                }).then(() => {if(conn) {conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    )\r\n}\r\nconst findCustomerByNameAndPhone = (name, phone) => {\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute('SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE', {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT})\r\n                    .then((result) => resolve(result.rows))\r\n                    .catch((error) => {\r\n                        console.log('error while findCustomer', error);\r\n                        reject('error');\r\n                    })\r\n            }).then(() => {if(conn) {conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\nmodule.exports = {\r\n    registerUser: registerUser,\r\n    findCustomers: findCustomerAPI,\r\n    userIdCheck: userIdCheck,\r\n    findUserById: findUserById,\r\n    findCustomerByNameAndPhone: findCustomerByNameAndPhone,\r\n    registerNonUser,\r\n    findUserByCustomerId\r\n}"]}