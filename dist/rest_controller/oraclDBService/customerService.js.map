{"version":3,"sources":["../../../rest_controller/oraclDBService/customerService.js"],"names":["oracledb","require","dbConfig","commonUtil","insertCustomerStep","connection","userDataObject","resolve","reject","execute","IS_USER","PHONE","USER_NAME","outFormat","OBJECT","autoCommit","then","result","catch","error","console","log","insertUserStep","USER_ID","ZIP_CODE","ADDR","ADDR_DET","EMAIL","BIRTH","PASSWORD","SALT","commit","err","registerUser","Promise","conn","findCustomerInfoOfUserByNameAndPhone","data","length","getConnection","connectConfig","close","registerNonUser","nonUserDataObject","findCustomerAPI","rows","userIdCheck","id","findUserById","findUserByCustomerId","cid","CUST_ID","findCustomerByNameAndPhone","name","phone","module","exports","findCustomers"],"mappings":"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","file":"customerService.js","sourcesContent":["var oracledb = require('oracledb');\r\nvar dbConfig = require('../../config/oracle-db-config');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nfunction insertCustomerStep(connection, userDataObject, resolve, reject){\r\n    return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n        {IS_USER: 'Y', PHONE: userDataObject.PHONE, USER_NAME: userDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: false })\r\n        .then((result) => connection)\r\n        .catch((error) => console.log(error));\r\n}\r\nfunction insertUserStep(connection, userDataObject, resolve, reject) {\r\n    return connection.execute(\"INSERT INTO USERS (USER_ID, ZIP_CODE, ADDR, ADDR_DET, EMAIL, BIRTH, CUST_ID, PASSWORD, SALT) \" +\r\n        \"VALUES(:USER_ID, :ZIP_CODE, :ADDR, :ADDR_DET, :EMAIL, :BIRTH, CUSTOMER_SEQ.CURRVAL , :PASSWORD, :SALT)\",\r\n        {USER_ID: userDataObject.USER_ID, ZIP_CODE: userDataObject.ZIP_CODE, ADDR: userDataObject.ADDR, ADDR_DET:userDataObject.ADDR_DET\r\n            ,EMAIL: userDataObject.EMAIL, BIRTH: userDataObject.BIRTH, PASSWORD: userDataObject.PASSWORD, SALT: userDataObject.SALT},\r\n        { outFormat: oracledb.OBJECT, autoCommit: false },(error, result) => {\r\n            if(error) {\r\n                reject(error);\r\n                return 'error is there';\r\n            }\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    console.log('error step',err);\r\n                    reject('error while commit', err);\r\n                    return;\r\n                }\r\n                resolve('success');\r\n            });\r\n        })\r\n}\r\nfunction registerUser(userDataObject) {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        findCustomerInfoOfUserByNameAndPhone(userDataObject.USER_NAME, userDataObject.PHONE)\r\n            .then((data) => {\r\n                if(data.length === 0 ) {\r\n                    oracledb.getConnection(dbConfig.connectConfig)\r\n                        .then((connection) => {\r\n                            let conn = connection;\r\n                            return insertCustomerStep(connection, userDataObject, resolve, reject);\r\n                        }).then((connection) => {\r\n                        return insertUserStep(connection, userDataObject, resolve, reject);\r\n                    }).then(() => {if(conn) { return conn.close();}})\r\n                }\r\n            }).catch((error) => {console.log('find customer Error')});\r\n\r\n    }).catch((error) => {console.log('error the fuck', error)});\r\n}\r\nfunction registerNonUser(nonUserDataObject) {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute(\"INSERT INTO CUSTOMER VALUES(CUSTOMER_SEQ.NEXTVAL, :IS_USER, :PHONE, :USER_NAME)\",\r\n                    {IS_USER: 'N', PHONE: nonUserDataObject.PHONE, USER_NAME: nonUserDataObject.USER_NAME}, { outFormat: oracledb.OBJECT, autoCommit: true });\r\n            }).then((result) => {\r\n            resolve(nonUserDataObject);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        })\r\n    });\r\n}\r\nfunction findCustomerAPI() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig, (err, connection) => {\r\n            if(err) {\r\n                console.log('hello Error');\r\n                return;\r\n            }\r\n            connection.execute(\"SELECT * FROM CUSTOMER\",\r\n                [],\r\n                { outFormat: oracledb.OBJECT},(error, result) => {\r\n                    resolve(result.rows);\r\n                    if(error) {\r\n                        reject(error);\r\n                        return 'error is there fucking';\r\n                    }\r\n\r\n                });\r\n        })\r\n    })\r\n}\r\nfunction userIdCheck(id) {\r\n    return new Promise((resolve,reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('SELECT 1 FROM USERS WHERE USER_ID = :USER_ID', {USER_ID: id}, { outFormat: oracledb.OBJECT })\r\n                    .then((result) => {\r\n                        resolve(result.rows);\r\n                }).catch((error) => {\r\n                    console.log('has error while select', error);\r\n                    reject('error');\r\n                });\r\n            }).catch((error) => {\r\n                console.log('error while Connection', error);\r\n            })\r\n    })\r\n}\r\nfunction findUserById(id) {\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    conn = connection;\r\n                    return connection.execute('SELECT * FROM USERS U NATURAL JOIN CUSTOMER C WHERE U.USER_ID = :USER_ID', {USER_ID: id}, {outFormat: oracledb.OBJECT})\r\n                        .then((result) => resolve(result.rows))\r\n                        .catch((error) => {\r\n                            console.log('error while findUser', error);\r\n                            reject('error');\r\n                        })\r\n                }).then(() => {if(conn) {return conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    ).catch((error) => {console.log('error of outer Promise', error)});\r\n}\r\nfunction findUserByCustomerId(cid){\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n            oracledb.getConnection(dbConfig.connectConfig)\r\n                .then((connection) => {\r\n                    conn = connection;\r\n                    return connection.execute('SELECT * FROM USERS U JOIN CUSTOMER C ON(U.CUST_ID = C.CUST_ID) WHERE C.CUST_ID = :CUST_ID', {CUST_ID: cid}, {outFormat: oracledb.OBJECT})\r\n                        .then((result) => resolve(result.rows))\r\n                        .catch((error) => {\r\n                            console.log('error while findUser', error);\r\n                            reject('error');\r\n                        })\r\n                }).then(() => {if(conn) {return conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n        }\r\n    )\r\n}\r\nfunction findCustomerByNameAndPhone(name, phone){\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute('SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE', {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT})\r\n                    .then((result) => resolve(result.rows))\r\n                    .catch((error) => {\r\n                        console.log('error while findCustomer', error);\r\n                        reject('error');\r\n                    })\r\n            }).then(() => {if(conn) {conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\n\r\nfunction findCustomerInfoOfUserByNameAndPhone(name, phone){\r\n    let conn;\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute(`SELECT * FROM CUSTOMER WHERE USER_NAME = :USER_NAME AND PHONE = :PHONE AND IS_USER = 'Y'`, {USER_NAME: name, PHONE: phone}, {outFormat: oracledb.OBJECT})\r\n                    .then((result) => resolve(result.rows))\r\n                    .catch((error) => {\r\n                        console.log('error while findCustomer', error);\r\n                        reject('error');\r\n                    })\r\n            }).then(() => {if(conn) {conn.close()}}).catch((error) => {console.log('inner promise error', error)});\r\n    })\r\n}\r\nmodule.exports = {\r\n    registerUser: registerUser,\r\n    findCustomers: findCustomerAPI,\r\n    userIdCheck: userIdCheck,\r\n    findUserById: findUserById,\r\n    findCustomerByNameAndPhone: findCustomerByNameAndPhone,\r\n    registerNonUser,\r\n    findUserByCustomerId\r\n}"]}