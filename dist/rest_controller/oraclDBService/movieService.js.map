{"version":3,"sources":["../../../rest_controller/oraclDBService/movieService.js"],"names":["dbConfig","require","oracledb","insertMovieExecute","movieObject","connection","console","log","sql","execute","MOVIE_NAME","MOVIE_INTRO","RUNTIME","DIST","MOVIE_IMG","RATE","GENRE","VIDEO_ADDR","autoCommit","then","result","catch","error","insertRelatedPerson","resolve","reject","people","PEOPLE","map","p","person","PER_ID","IS_MAIN","CH_NAME","executeMany","err","doRelease","commit","insertMovieAPI","Promise","getConnection","connectConfig","length","findAllMovie","outFormat","OBJECT","rows","findMovieById","MOVIE_ID","moviePlayingChange","movieId","value","IS_PLAYING","findAllPlayingMovie","close","module","exports","insertMovie"],"mappings":"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","file":"movieService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\n\r\nconst insertMovieExecute = (movieObject, connection) => {\r\n    console.log(movieObject);\r\n    const sql = 'INSERT INTO MOVIE (MOVIE_ID, MOVIE_NAME, MOVIE_INTRO, RUNTIME, DIST, MOVIE_IMG, RATE, GENRE, VIDEO_ADDR) ' +\r\n        'VALUES(MOVIE_SEQ.NEXTVAL, :MOVIE_NAME, :MOVIE_INTRO, :RUNTIME, :DIST, :MOVIE_IMG, :RATE, :GENRE, :VIDEO_ADDR)';\r\n    return connection.execute(sql,\r\n        {MOVIE_NAME:movieObject.MOVIE_NAME, MOVIE_INTRO: movieObject.MOVIE_INTRO, RUNTIME: movieObject.RUNTIME, DIST: movieObject.DIST, MOVIE_IMG: movieObject.MOVIE_IMG, RATE: movieObject.RATE, GENRE: movieObject.GENRE,\r\n            VIDEO_ADDR: movieObject.VIDEO_ADDR}\r\n        ,{autoCommit: false})\r\n        .then((result) => connection)\r\n        .catch((error) => console.log(error));\r\n}\r\nconst insertRelatedPerson = (connection, movieObject, resolve, reject) => {\r\n    const people = movieObject.PEOPLE.map((p) => {\r\n        const person = {};\r\n        person.PER_ID = p.PER_ID;\r\n        if(!p.IS_MAIN) {\r\n            person.IS_MAIN = 'N';\r\n        }else {\r\n            person.IS_MAIN = 'Y';\r\n        }\r\n        person.CH_NAME = p.CH_NAME;\r\n        return person;\r\n    })\r\n    console.log(people);\r\n    return connection.executeMany('INSERT INTO RELATED_PERSON VALUES(MOVIE_SEQ.CURRVAL, :IS_MAIN, :CH_NAME, :PER_ID)',\r\n        people,\r\n        {autoCommit: false}, (err, result) => {\r\n            if(err) {\r\n                doRelease(connection);\r\n                console.log(err);\r\n                reject('error');\r\n                return;\r\n            }\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    console.log(err);\r\n                    reject('error');\r\n                    return;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        })\r\n}\r\nconst insertMovieAPI = (movieObject) => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return insertMovieExecute(movieObject, connection);\r\n            }).then((connection) => {\r\n            if(movieObject.PEOPLE && movieObject.PEOPLE.length !== 0 ){\r\n                return insertRelatedPerson(connection,movieObject, resolve, reject);\r\n            }else {\r\n                connection.commit((err) => {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve('success');\r\n                })\r\n            }\r\n        }).catch((error) => { console.log(error)});\r\n    })\r\n\r\n}\r\nconst findAllMovie = () => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT M.*, RP.PER_ID, RP.PER_NAME, RP.PER_IMG, RP.CH_NAME, RP.IS_MAIN ' +\r\n                    'FROM (SELECT * FROM MOVIE) M LEFT OUTER JOIN ' +\r\n                    '(SELECT P.PER_ID, P.PER_NAME, P.PER_IMG, P.ROLE, R.CH_NAME, R.MOVIE_ID, R.IS_MAIN FROM PERSON P, RELATED_PERSON R WHERE P.PER_ID = R.PER_ID) RP ' +\r\n                    'ON(M.MOVIE_ID = RP.MOVIE_ID)', [], {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err){\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((error) => {\r\n            console.log(error);\r\n        })\r\n    })\r\n}\r\n\r\nconst findMovieById = (MOVIE_ID) => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                 connection.execute('SELECT * FROM MOVIE WHERE MOVIE_ID = :MOVIE_ID', {MOVIE_ID: MOVIE_ID}, {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err){\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((error) => {\r\n            console.log(error);\r\n        })\r\n    })\r\n}\r\nfunction moviePlayingChange(movieId, value) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('UPDATE MOVIE SET IS_PLAYING = :IS_PLAYING WHERE MOVIE_ID = :MOVIE_ID', {IS_PLAYING: value, MOVIE_ID: movieId}, {autoCommit: true}, (err, result) => {\r\n                    if(err){\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve('success');\r\n                })\r\n            }).catch((error) => {\r\n            console.log(error);\r\n        })\r\n    })\r\n}\r\nfunction findAllPlayingMovie() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT M.*, RP.PER_ID, RP.PER_NAME, RP.PER_IMG, RP.CH_NAME, RP.IS_MAIN ' +\r\n                    'FROM (SELECT * FROM MOVIE) M LEFT OUTER JOIN ' +\r\n                    '(SELECT P.PER_ID, P.PER_NAME, P.PER_IMG, P.ROLE, R.CH_NAME, R.MOVIE_ID, R.IS_MAIN FROM PERSON P, RELATED_PERSON R WHERE P.PER_ID = R.PER_ID) RP ' +\r\n                    \"ON(M.MOVIE_ID = RP.MOVIE_ID) WHERE M.IS_PLAYING = 'Y'\", [], {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err){\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((error) => {\r\n            console.log(error);\r\n        })\r\n    })\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\nmodule.exports = {\r\n    insertMovie: insertMovieAPI,\r\n    findAllMovie,\r\n    findMovieById,\r\n    moviePlayingChange,\r\n    findAllPlayingMovie\r\n}"]}