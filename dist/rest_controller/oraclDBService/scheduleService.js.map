{"version":3,"sources":["../../../rest_controller/oraclDBService/scheduleService.js"],"names":["dbConfig","require","oracledb","commonUtil","cinemaService","movieService","playInfoService","bookSeatService","insertScheduleExecute","connection","scheduleObject","console","log","execute","MOVIE_ID","SCHED_DATE","SCHED_NO","PL_START_TIME","CINEMA_NO","BRCH_ID","PL_END_TIME","PT_ID","autoCommit","then","result","insertSchedule","Promise","resolve","reject","getConnection","connectConfig","insertPlayInfoExecute","firstBatchInsert","commit","err","doRelease","catch","error","findScheduleByDate","date","sql","outFormat","OBJECT","rows","findAll","deleteScheduleById","scheduleId","deletePlayInfoBySchedIdExecute","deleteBookSeatByScheduleIdExecute","SCHED_ID","rowsAffected","findMovieScheduleBetweenStartEnd","start","end","branchId","cinemaNO","Date","findMovieScheduleBetween","movieId","date1","date2","SCHED_DATE_1","SCHED_DATE_2","toPublic","close","module","exports"],"mappings":"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","file":"scheduleService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst cinemaService = require('./cinemaService');\r\nconst movieService = require('./movieService');\r\nconst playInfoService = require('./playInfoService');\r\nconst bookSeatService = require('./bookSeatService');\r\nfunction insertScheduleExecute(connection,scheduleObject) {\r\n    console.log(scheduleObject);\r\n    return connection.execute(`INSERT INTO SCHEDULE \r\n    (SCHED_ID, MOVIE_ID, SCHED_DATE, SCHED_NO, PL_START_TIME, CINEMA_NO, BRCH_ID, PL_END_TIME, PT_ID)\r\n    VALUES(SCHEDULE_SEQ.NEXTVAL, :MOVIE_ID, TO_DATE(:SCHED_DATE,'YYYYMMDD'), :SCHED_NO, TO_DATE(:PL_START_TIME, 'YYYYMMDDHH24MI'), :CINEMA_NO, :BRCH_ID, TO_DATE(:PL_END_TIME, 'YYYYMMDDHH24MI'), :PT_ID)`,\r\n        {MOVIE_ID: scheduleObject.MOVIE_ID, SCHED_DATE: scheduleObject.SCHED_DATE,\r\n        SCHED_NO: scheduleObject.SCHED_NO, PL_START_TIME: scheduleObject.PL_START_TIME,\r\n        CINEMA_NO: scheduleObject.CINEMA_NO, BRCH_ID: scheduleObject.BRCH_ID,\r\n        PL_END_TIME: scheduleObject.PL_END_TIME, PT_ID: scheduleObject.PT_ID}, {autoCommit: false})\r\n        .then((result) => connection)\r\n}\r\nfunction insertSchedule(scheduleObject) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return insertScheduleExecute(connection, scheduleObject);\r\n            }).then((connection) => {\r\n            return playInfoService.insertPlayInfoExecute(connection, scheduleObject);\r\n        }).then((connection) => {\r\n            return bookSeatService.firstBatchInsert(connection, scheduleObject);\r\n        }).then((connection) => {\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    console.log(err);\r\n                    doRelease(connection);\r\n                    reject('error');\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        }).catch((error) => console.log(error));\r\n    })\r\n}\r\nfunction findScheduleByDate(date) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(date);\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT *\r\n                FROM SCHEDULE S JOIN PLAY_TYPE PT ON(S.PT_ID = PT.PT_ID)\r\n                WHERE SCHED_DATE = TO_DATE(:SCHED_DATE, 'YYMMDD')`;\r\n                connection.execute(sql, {SCHED_DATE: date}, {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            })\r\n    })\r\n}\r\nfunction findAll() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT S.SCHED_ID, S.SCHED_NO, S.MOVIE_ID, TO_CHAR(S.SCHED_DATE, 'YYYY-MM-DD') AS SCHED_DATE,\r\n                TO_CHAR(S.PL_START_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_START_TIME,\r\n                 TO_CHAR(S.PL_END_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_END_TIME,\r\n                 S.IS_PUBLIC, M.MOVIE_NAME,\r\n                 S.BRCH_ID, PT.PT_NAME, PT.PT_ID FROM SCHEDULE S JOIN PLAY_TYPE PT ON(S.PT_ID = PT.PT_ID) JOIN MOVIE M ON(M.MOVIE_ID = S.MOVIE_ID)`;\r\n                connection.execute(sql, [] , {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            })\r\n    })\r\n}\r\nfunction deleteScheduleById(scheduleId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => playInfoService.deletePlayInfoBySchedIdExecute(connection,scheduleId))\r\n            .then((connection) => bookSeatService.deleteBookSeatByScheduleIdExecute(connection, scheduleId))\r\n            .then((connection) => {\r\n                connection.execute(\"DELETE FROM SCHEDULE WHERE SCHED_ID = :SCHED_ID AND IS_PUBLIC = 'N'\", {SCHED_ID: scheduleId}, {autoCommit: true},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            doRelease(connection);\r\n                            console.log(err);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        if(result.rowsAffected) {\r\n                            connection.commit((err) => {\r\n                                if(err){\r\n                                    doRelease(connection);\r\n                                    console.log(err);\r\n                                    reject(err);\r\n                                    return;\r\n                                }\r\n                                doRelease(connection);\r\n                                resolve('success');\r\n                            })\r\n                        }else {\r\n                            doRelease(connection);\r\n                            console.log('no delete');\r\n                            reject('no delete');\r\n                            return;\r\n                        }\r\n                    })\r\n            }).catch((error) => { console.log(error); reject(error)});\r\n    })\r\n}\r\nfunction findMovieScheduleBetweenStartEnd(start, end, branchId, cinemaNO) {\r\n    console.log(new Date());\r\n    console.log(start);\r\n    console.log(end);\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT MOVIE_ID, SCHED_NO , TO_CHAR(PL_START_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_START_TIME, \r\n                TO_CHAR(PL_END_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_END_TIME\r\n                FROM SCHEDULE \r\n                WHERE CINEMA_NO = :CINEMA_NO AND BRCH_ID = :BRCH_ID  AND\r\n                (TO_DATE(:PL_START_TIME, 'YYYYMMDDHH24MI') BETWEEN PL_START_TIME AND PL_END_TIME \r\n                OR TO_DATE(:PL_END_TIME, 'YYYYMMDDHH24MI') BETWEEN PL_START_TIME AND PL_END_TIME)`;\r\n\r\n                connection.execute(sql, {CINEMA_NO: cinemaNO, BRCH_ID: branchId, PL_START_TIME: start, PL_END_TIME: end},\r\n                    {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            doRelease(connection);\r\n                            reject('error');\r\n                            console.log('error while findMovieScheduleBetweenStartEnd', err);\r\n                            return;\r\n                        }\r\n                        console.log(result);\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction findMovieScheduleBetween(movieId, date1, date2) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(date1, date2);\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT S.SCHED_ID, S.MOVIE_ID, S.SCHED_NO, TO_CHAR(S.SCHED_DATE, 'YYYY-MM-DD') AS SCHED_DATE,\r\n                TO_CHAR(S.PL_START_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_START_TIME,\r\n                TO_CHAR(S.PL_END_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_END_TIME,\r\n                S.CINEMA_NO, S.BRCH_ID, PT.PT_NAME, PT.PT_PRICE, PT.PT_ID\r\n                FROM SCHEDULE S JOIN PLAY_TYPE PT ON(S.PT_ID = PT.PT_ID)\r\n                WHERE MOVIE_ID = :MOVIE_ID AND SCHED_DATE BETWEEN  :SCHED_DATE_1 AND :SCHED_DATE_2`;\r\n                connection.execute(sql, {MOVIE_ID: movieId, SCHED_DATE_1: date1, SCHED_DATE_2: date2}, {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            })\r\n    })\r\n}\r\nfunction toPublic(SCHED_ID) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `UPDATE SCHEDULE SET IS_PUBLIC = 'Y' WHERE SCHED_ID = :SCHED_ID`;\r\n                connection.execute(sql, {SCHED_ID: SCHED_ID}, {outFormat: oracledb.OBJECT, autoCommit: true}, (err, result) => {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        return;\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve('success');\r\n                })\r\n            })\r\n    })\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    insertSchedule,\r\n    findScheduleByDate,\r\n    findMovieScheduleBetween,\r\n    findMovieScheduleBetweenStartEnd,\r\n    findAll,\r\n    toPublic,\r\n    deleteScheduleById\r\n}"]}