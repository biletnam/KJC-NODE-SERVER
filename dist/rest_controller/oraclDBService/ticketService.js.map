{"version":3,"sources":["../../../rest_controller/oraclDBService/ticketService.js"],"names":["dbConfig","require","oracledb","commonUtil","bookSeatService","insertTicket","connection","ticketObject","sql","execute","CUST_ID","TCK_PRICE","BOOK_SEAT_CNT","SCHED_ID","SEAT_NAME","tck_id","type","NUMBER","dir","BIND_OUT","autoCommit","deleteTicketById","ticketId","TCK_ID","then","result","deleteTicketByIds","ticketIds","map","s","i","join","resetBookAndTicket","Promise","resolve","reject","getConnection","connectConfig","console","log","resetBookSeatTicket","commit","err","doRelease","checkAndResetTicket","findTicketById","data","tckStatus","TCK_STATUS","catch","error","findCStatusTicketForSystem","outFormat","OBJECT","rows","resetBookAndTickets","resetBookSeatTickets","checkAndResetTicketAfterMinute","minute","now","Date","needToDeleteTicketIds","filter","d","getTime","BOOK_DATE","length","createTicket","gConn","outBinds","setTimeout","updateBookSeatTicketAndBookable","updateTicketStatusToExecute","status","updateTicketTo","findMeaningTicketByCustomerId","customerId","Number","ticketAndBookSeatRefundProcessExecute","close","module","exports"],"mappings":"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","file":"ticketService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst bookSeatService = require('./bookSeatService');\r\n\r\nfunction insertTicket(connection, ticketObject) {\r\n    const sql = `INSERT INTO TICKET \r\n                (TCK_ID, CUST_ID, BOOK_DATE, TCK_PRICE, BOOK_SEAT_CNT, SCHED_ID, SEAT_NAME)\r\n                VALUES (TICKET_SEQ.NEXTVAL, :CUST_ID, SYSDATE, :TCK_PRICE, :BOOK_SEAT_CNT, :SCHED_ID, :SEAT_NAME) RETURNING TCK_ID INTO :tck_id`\r\n    return connection.execute(sql, {CUST_ID: ticketObject.CUST_ID, TCK_PRICE: ticketObject.TCK_PRICE,\r\n            BOOK_SEAT_CNT: ticketObject.BOOK_SEAT_CNT, SCHED_ID: ticketObject.SCHED_ID, SEAT_NAME: ticketObject.SEAT_NAME, tck_id: {type: oracledb.NUMBER, dir: oracledb.BIND_OUT} }, {autoCommit: false})\r\n}\r\nfunction deleteTicketById(connection, ticketId) {\r\n    return connection.execute('DELETE FROM TICKET WHERE TCK_ID = :TCK_ID', {TCK_ID: ticketId}, {autoCommit: false}).then((result) => connection)\r\n}\r\nfunction deleteTicketByIds(connection, ticketIds) {\r\n    const sql = `DELETE FROM TICKET WHERE TCK_ID IN (${ticketIds.map((s,i) => ':'+i).join(', ')})`;\r\n    return connection.execute(sql, ticketIds, {autoCommit: false}).then((result) => connection)\r\n}\r\nfunction resetBookAndTicket(ticketId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                console.log('here');\r\n                return bookSeatService.resetBookSeatTicket(connection, ticketId);\r\n            }).then((connection) => {\r\n            console.log('we are here');\r\n            return deleteTicketById(connection, ticketId);\r\n        }).then((connection)=> {\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    reject(err);\r\n                    throw err;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        });\r\n    })\r\n}\r\nfunction checkAndResetTicket(ticketId){\r\n    return new Promise((resolve, reject) => {\r\n        findTicketById(ticketId)\r\n            .then((data) => {\r\n                const tckStatus = data[0].TCK_STATUS;\r\n                console.log(tckStatus);\r\n                console.log('they are here to delete Ticket');\r\n\r\n                if(!tckStatus || tckStatus !=='C') {\r\n                    reject(\"this Ticket can't be deleted\");\r\n                    return true;\r\n                } else {\r\n                    resetBookAndTicket(ticketId)\r\n                        .then((data) => {\r\n                            resolve(data);\r\n                        }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }\r\n            }).catch((error) => {console.log(error);});\r\n    }).catch((error) => console.log(error));\r\n}\r\nfunction findCStatusTicketForSystem() {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute(`SELECT * FROM TICKET WHERE TCK_STATUS = 'C'`, [], {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction resetBookAndTickets(ticketIds) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                console.log('here');\r\n                return bookSeatService.resetBookSeatTickets(connection, ticketIds);\r\n            }).then((connection) => {\r\n            console.log('we are here');\r\n            return deleteTicketByIds(connection, ticketIds);\r\n        }).then((connection)=> {\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    reject(err);\r\n                    throw err;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        }).catch((error) => console.log(error));\r\n    })\r\n}\r\nfunction checkAndResetTicketAfterMinute(minute){\r\n    return new Promise((resolve, reject) => {\r\n        findCStatusTicketForSystem()\r\n            .then((data) => {\r\n                const now = new Date();\r\n                const needToDeleteTicketIds = data.filter((d) => { return (now.getTime() - d.BOOK_DATE.getTime()) > minute * 60 * 1000})\r\n                                            .map((d) => (d.TCK_ID));\r\n                if(needToDeleteTicketIds.length > 0) {\r\n                    resetBookAndTickets(needToDeleteTicketIds)\r\n                        .then((data) => {\r\n                            resolve(data);\r\n                        }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }else {\r\n                    reject('none');\r\n                }\r\n            }).catch((error) => {console.log(error);});\r\n    });\r\n}\r\nfunction findTicketById(ticketId) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(ticketId);\r\n        console.log(new Date());\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute(`SELECT CUST_ID, TCK_ID, TCK_STATUS, TO_CHAR(BOOK_DATE, 'YYYY-MM-DD\"T\"HH24:MI') AS BOOK_DATE, TCK_PRICE, BOOK_SEAT_CNT, SCHED_ID, SEAT_NAME FROM TICKET WHERE TCK_ID = :TCK_ID`, {TCK_ID: ticketId}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction createTicket(ticketObject) {\r\n    let gConn;\r\n    return new Promise((resolve, reject) => {\r\n        let ticketId;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return insertTicket(connection, ticketObject).then((result) => {\r\n                    gConn = connection;\r\n                    const TCK_ID = result.outBinds.tck_id[0];\r\n                    if(!TCK_ID) {\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        throw 'error';\r\n                    }\r\n                    setTimeout(() => {checkAndResetTicket(TCK_ID)}, 190000);\r\n                    ticketId = TCK_ID;\r\n                    console.log('' + ticketId);\r\n                    return connection\r\n                }).then((connection) => {\r\n                    console.log(ticketId);\r\n                    return bookSeatService.updateBookSeatTicketAndBookable(connection, ticketId, ticketObject);\r\n                }).then((connection) => {\r\n                    connection.commit((error) => {\r\n                        if(error) {\r\n                            doRelease(connection);\r\n                            reject(error);\r\n                            throw 'error';\r\n                        }\r\n                        doRelease(connection);\r\n                        console.log(ticketId);\r\n                        resolve(ticketId);\r\n                    })\r\n                }).catch((error) => {if(gConn) { doRelease(gConn); console.log(error)}});\r\n            })\r\n            .catch((error) => {console.log(error);});\r\n    })\r\n}\r\nfunction updateTicketStatusToExecute(connection, ticketId, status) {\r\n    return connection.execute(`UPDATE TICKET SET TCK_STATUS = :TCK_STATUS WHERE TCK_ID = :TCK_ID`, {TCK_STATUS: status, TCK_ID: ticketId}, {outFormat: oracledb.OBJECT, autoCommit: false})\r\n        .then((result) => connection);\r\n}\r\nfunction updateTicketTo(ticketId, status) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute(`UPDATE TICKET SET TCK_STATUS = :TCK_STATUS WHERE TCK_ID = :TCK_ID`, {TCK_STATUS: status, TCK_ID: ticketId}, {outFormat: oracledb.OBJECT, autoCommit: true},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction findMeaningTicketByCustomerId(customerId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                console.log(customerId);\r\n                connection.execute(`SELECT T.TCK_ID, T.TCK_STATUS, TO_CHAR(T.BOOK_DATE, 'YYYY-MM-DD\"T\"HH24:MI') AS BOOK_DATE,\r\n                  T.SEAT_NAME, P.FLOOR, P.BRCH_NAME,\r\n                  TO_CHAR(P.PL_START_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_START_TIME,\r\n                  TO_CHAR(P.PL_END_TIME, 'YYYY-MM-DD\"T\"HH24:MI') AS PL_END_TIME,\r\n                  P.CINEMA_NO, P.MOVIE_NAME, P.PT_NAME\r\n                  FROM TICKET T JOIN PLAY_INFO P ON(T.SCHED_ID = P.SCHED_ID) WHERE T.CUST_ID = :CUST_ID AND T.TCK_STATUS != 'C'\r\n                  ORDER BY T.BOOK_DATE`, {CUST_ID: Number(customerId)}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction ticketAndBookSeatRefundProcessExecute(connection, TCK_ID) {\r\n    return connection.execute(`UPDATE TICKET SET TCK_STATUS = 'R' WHERE TCK_ID = :TCK_ID`, {TCK_ID: TCK_ID}, {autoCommit: false})\r\n        .then((result) => connection)\r\n        .then((connection) => {\r\n            return bookSeatService.resetBookSeatTicket(connection, TCK_ID);\r\n        })\r\n\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    createTicket,\r\n    findTicketById,\r\n    checkAndResetTicket,\r\n    checkAndResetTicketAfterMinute,\r\n    updateTicketStatusToExecute,\r\n    findMeaningTicketByCustomerId,\r\n    ticketAndBookSeatRefundProcessExecute,\r\n    updateTicketTo\r\n}"]}