{"version":3,"sources":["../../../rest_controller/oraclDBService/ticketService.js"],"names":["dbConfig","require","oracledb","commonUtil","bookSeatService","insertTicket","connection","ticketObject","sql","execute","CUST_ID","TCK_PRICE","BOOK_SEAT_CNT","SCHED_ID","SEAT_NAME","tck_id","type","NUMBER","dir","BIND_OUT","autoCommit","deleteTicketById","ticketId","TCK_ID","then","result","resetBookAndTicket","Promise","resolve","reject","getConnection","connectConfig","console","log","resetBookSeatTicket","commit","err","doRelease","checkAndResetTicket","findTicketById","data","tckStatus","TCK_STATUS","catch","error","Date","outFormat","OBJECT","rows","createTicket","gConn","outBinds","setTimeout","connectionObject","conn","updateBookSeatTicketAndBookable","close","module","exports"],"mappings":"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","file":"ticketService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst bookSeatService = require('./bookSeatService');\r\n\r\nfunction insertTicket(connection, ticketObject) {\r\n    const sql = `INSERT INTO TICKET \r\n                (TCK_ID, CUST_ID, BOOK_DATE, TCK_PRICE, BOOK_SEAT_CNT, SCHED_ID, SEAT_NAME)\r\n                VALUES (TICKET_SEQ.NEXTVAL, :CUST_ID, SYSDATE, :TCK_PRICE, :BOOK_SEAT_CNT, :SCHED_ID, :SEAT_NAME) RETURNING TCK_ID INTO :tck_id`\r\n    return connection.execute(sql, {CUST_ID: ticketObject.CUST_ID, TCK_PRICE: ticketObject.TCK_PRICE,\r\n            BOOK_SEAT_CNT: ticketObject.BOOK_SEAT_CNT, SCHED_ID: ticketObject.SCHED_ID, SEAT_NAME: ticketObject.SEAT_NAME, tck_id: {type: oracledb.NUMBER, dir: oracledb.BIND_OUT} }, {autoCommit: false})\r\n}\r\nfunction deleteTicketById(connection, ticketId) {\r\n    return connection.execute('DELETE FROM TICKET WHERE TCK_ID = :TCK_ID', {TCK_ID: ticketId}, {autoCommit: false}).then((result) => connection)\r\n}\r\nfunction resetBookAndTicket(ticketId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                console.log('here');\r\n                return bookSeatService.resetBookSeatTicket(connection, ticketId);\r\n            }).then((connection) => {\r\n            console.log('we are here');\r\n            return deleteTicketById(connection, ticketId);\r\n        }).then((connection)=> {\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    reject(err);\r\n                    throw err;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        });\r\n    })\r\n}\r\nfunction checkAndResetTicket(ticketId){\r\n    return new Promise((resolve, reject) => {\r\n        findTicketById(ticketId)\r\n            .then((data) => {\r\n                const tckStatus = data[0].TCK_STATUS;\r\n                console.log(tckStatus);\r\n                console.log('they are here to delete Ticket');\r\n\r\n                if(!tckStatus || tckStatus !=='C') {\r\n                    reject(\"this Ticket can't be deleted\");\r\n                    return true;\r\n                } else {\r\n                    resetBookAndTicket(ticketId)\r\n                        .then((data) => {\r\n                            resolve(data);\r\n                        }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }\r\n            }).catch((error) => {console.log(error);});\r\n    });\r\n}\r\nfunction findTicketById(ticketId) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(ticketId);\r\n        console.log(new Date());\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute(`SELECT TCK_ID, TCK_STATUS, TO_CHAR(BOOK_DATE, 'YYYY-MM-DD\"T\"HH24:MI') AS BOOK_DATE, TCK_PRICE, BOOK_SEAT_CNT, SCHED_ID, SEAT_NAME FROM TICKET WHERE TCK_ID = :TCK_ID`, {TCK_ID: ticketId}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log(err);\r\n                            doRelease(connection);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction createTicket(ticketObject) {\r\n    let gConn;\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return insertTicket(connection, ticketObject).then((result) => {\r\n                    gConn = connection;\r\n                    const TCK_ID = result.outBinds.tck_id[0];\r\n                    if(!TCK_ID) {\r\n                        doRelease(connection);\r\n                        reject('error');\r\n                        throw 'error';\r\n                    }\r\n                    setTimeout(() => {checkAndResetTicket(TCK_ID)}, 190000);\r\n                    return {connection: connection, TCK_ID: TCK_ID}\r\n                }).then((connectionObject) => {\r\n                    const conn = connectionObject.connection;\r\n                    return bookSeatService.updateBookSeatTicketAndBookable(conn, connectionObject.TCK_ID, ticketObject);\r\n                }).then((connection) => {\r\n                    connection.commit((error) => {\r\n                        if(error) {\r\n                            doRelease(connection);\r\n                            reject(error);\r\n                            throw 'error';\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve('success');\r\n                    })\r\n                }).catch((error) => {if(gConn) { doRelease(gConn); console.log(error)}});\r\n            })\r\n            .catch((error) => {console.log(error);});\r\n    })\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    createTicket,\r\n    findTicketById,\r\n    checkAndResetTicket\r\n}"]}