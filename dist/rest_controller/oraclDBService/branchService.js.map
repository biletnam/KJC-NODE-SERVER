{"version":3,"sources":["../../../rest_controller/oraclDBService/branchService.js"],"names":["dbConfig","require","oracledb","commonUtil","insertBranch","branchObject","Promise","resolve","reject","conn","getConnection","connectConfig","then","connection","execute","BRANCH_NAME","ZIP_CODE","ADDR","ADDR_DET","autoCommit","err","result","doRelease","addPrefixErrorHandler","catch","error","findAllBranch","outFormat","OBJECT","rows","findBranchById","id","BRCH_ID","close","console","log","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,+BAAR,CAAjB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,aAAaF,QAAQ,+BAAR,CAAnB;AACA,IAAMG,eAAe,SAAfA,YAAe,CAACC,YAAD,EAAkB;AACnC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,aAAJ;AACAP,iBAASQ,aAAT,CAAuBV,SAASW,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClBJ,mBAAOI,UAAP;AACA,mBAAOA,WAAWC,OAAX,CAAmB,0FAAnB,EACH;AACIC,6BAAaV,aAAaU,WAD9B;AAEIC,0BAAUX,aAAaW,QAF3B;AAGIC,sBAAMZ,aAAaY,IAHvB;AAIIC,0BAAUb,aAAaa;AAJ3B,aADG,EAMA,EAACC,YAAY,IAAb,EANA,EAMoB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,oBAAID,GAAJ,EAAS;AACLE,8BAAUT,UAAV;AACAL,2BAAO,OAAP;AACAL,+BAAWoB,qBAAX,CAAiCH,GAAjC,EAAsC,kBAAtC;AACA;AACH;AACDE,0BAAUT,UAAV;AACAN,wBAAQ,SAAR;AACH,aAfE,CAAP;AAgBP,SAnBD,EAmBGiB,KAnBH,CAmBS,UAACC,KAAD;AAAA,mBAAWtB,WAAWoB,qBAAX,CAAiCE,KAAjC,EAAwC,wBAAxC,CAAX;AAAA,SAnBT;AAoBH,KAtBM,CAAP;AAuBH,CAxBD;AAyBA,IAAMC,gBAAgB,SAAhBA,aAAgB,GAAM;AACxB,WAAO,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,aAAJ;AACAP,iBAASQ,aAAT,CAAuBV,SAASW,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClBJ,mBAAOI,UAAP;AACA,mBAAOA,WAAWC,OAAX,CAAmB,sBAAnB,EAA2C,EAA3C,EAA+C,EAACa,WAAWzB,SAAS0B,MAArB,EAA/C,EAA6E,UAACR,GAAD,EAAMC,MAAN,EAAiB;AACjG,oBAAGD,GAAH,EAAQ;AACJjB,+BAAWoB,qBAAX,CAAiCH,GAAjC,EAAsC,oBAAtC;AACAE,8BAAUT,UAAV;AACAL,2BAAO,KAAP;AACH;AACDc,0BAAUT,UAAV;AACAN,wBAAQc,OAAOQ,IAAf;AACH,aARM,CAAP;AASH,SAZL,EAYOL,KAZP,CAYa,UAACJ,GAAD;AAAA,mBAASjB,WAAWoB,qBAAX,CAAiCH,GAAjC,EAAsC,wBAAtC,CAAT;AAAA,SAZb;AAaH,KAfM,CAAP;AAgBH,CAjBD;AAkBA,IAAMU,iBAAiB,SAAjBA,cAAiB,CAACC,EAAD,EAAQ;AAC3B,WAAO,IAAIzB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,aAAJ;AACAP,iBAASQ,aAAT,CAAuBV,SAASW,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClBJ,mBAAOI,UAAP;AACA,mBAAOA,WAAWC,OAAX,CAAmB,+CAAnB,EAAoE,EAACkB,SAASD,EAAV,EAApE,EAAmF,EAACJ,WAAWzB,SAAS0B,MAArB,EAAnF,EAAiH,UAACR,GAAD,EAAMC,MAAN,EAAiB;AACrI,oBAAGD,GAAH,EAAQ;AACJjB,+BAAWoB,qBAAX,CAAiCH,GAAjC,EAAsC,oBAAtC;AACAE,8BAAUT,UAAV;AACAL,2BAAO,KAAP;AACH;AACDc,0BAAUT,UAAV;AACAN,wBAAQc,OAAOQ,IAAf;AACH,aARM,CAAP;AASH,SAZL,EAYOL,KAZP,CAYa,UAACJ,GAAD;AAAA,mBAASjB,WAAWoB,qBAAX,CAAiCH,GAAjC,EAAsC,wBAAtC,CAAT;AAAA,SAZb;AAaH,KAfM,CAAP;AAgBH,CAjBD;;AAoBA,SAASE,SAAT,CAAmBT,UAAnB,EAA+B;AAC3B,WAAOA,WAAWoB,KAAX,CAAiB,UAACb,GAAD,EAAS;AAC7B,YAAGA,GAAH,EAAQ;AACJc,oBAAQC,GAAR,CAAYf,GAAZ;AACH;AACJ,KAJM,CAAP;AAKH;;AAEDgB,OAAOC,OAAP,GAAiB;AACbjC,8BADa;AAEbsB,gCAFa;AAGbI;AAHa,CAAjB","file":"branchService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\nconst insertBranch = (branchObject) => {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute('INSERT INTO BRANCH VALUES(BRANCH_SEQ.NEXTVAL, :BRANCH_NAME, :ZIP_CODE, :ADDR, :ADDR_DET)',\r\n                    {\r\n                        BRANCH_NAME: branchObject.BRANCH_NAME,\r\n                        ZIP_CODE: branchObject.ZIP_CODE,\r\n                        ADDR: branchObject.ADDR,\r\n                        ADDR_DET: branchObject.ADDR_DET\r\n                    }, {autoCommit: true}, (err, result) => {\r\n                        if (err) {\r\n                            doRelease(connection);\r\n                            reject('error');\r\n                            commonUtil.addPrefixErrorHandler(err, 'errorWhileInsert');\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve('success');\r\n                    })\r\n        }).catch((error) => commonUtil.addPrefixErrorHandler(error, 'error while connection'));\r\n    });\r\n}\r\nconst findAllBranch = () => {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute('SELECT * FROM BRANCH', [], {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        commonUtil.addPrefixErrorHandler(err, 'error while select');\r\n                        doRelease(connection);\r\n                        reject('err');\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((err) => commonUtil.addPrefixErrorHandler(err, 'while connection error'));\r\n    });\r\n}\r\nconst findBranchById = (id) => {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return connection.execute('SELECT * FROM BRANCH WHERE BRCH_ID = :BRCH_ID', {BRCH_ID: id}, {outFormat: oracledb.OBJECT}, (err, result) => {\r\n                    if(err) {\r\n                        commonUtil.addPrefixErrorHandler(err, 'error while select');\r\n                        doRelease(connection);\r\n                        reject('err');\r\n                    }\r\n                    doRelease(connection);\r\n                    resolve(result.rows);\r\n                })\r\n            }).catch((err) => commonUtil.addPrefixErrorHandler(err, 'while connection error'));\r\n    });\r\n}\r\n\r\n\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    insertBranch,\r\n    findAllBranch,\r\n    findBranchById\r\n}"]}