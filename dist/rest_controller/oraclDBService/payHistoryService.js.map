{"version":3,"sources":["../../../rest_controller/oraclDBService/payHistoryService.js"],"names":["dbConfig","require","oracledb","ticketService","customerService","createPayHistoryExecute","connection","payHistoryObject","sql","execute","CUST_ID","PAY_DET_CODE","PAY_CL_CODE","POINT_PAY","DISC_PRICE","PAY_PRICE","POINT_SAVE","TCK_ID","DISC_CODE","autoCommit","then","result","createPayHistory","Promise","resolve","reject","getConnection","connectConfig","updateTicketStatusToExecute","updatePointOfUserExecute","commit","error","doRelease","console","log","catch","createPayHistoryOfNonUser","findPayHistoryByTicketId","ticketId","outFormat","OBJECT","err","rows","findPayHistoryByCustomerId","customerId","updatePayHistoryStatusExecute","PAY_STATUS","refund","conn","IS_USER","point","ticketAndBookSeatRefundProcessExecute","close","module","exports"],"mappings":"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","file":"payHistoryService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst ticketService  = require('./ticketService');\r\nconst customerService = require('./customerService');\r\nfunction createPayHistoryExecute(connection, payHistoryObject) {\r\n    const sql = `INSERT INTO PAY_HISTORY \r\n                (CUST_ID, PAY_DET_CODE, PAY_CL_CODE, POINT_PAY, DISC_PRICE, PAY_PRICE, POINT_SAVE, TCK_ID, DISC_CODE, PAY_DATE) \r\n                VALUES(:CUST_ID, :PAY_DET_CODE, :PAY_CL_CODE, :POINT_PAY, :DISC_PRICE, :PAY_PRICE, :POINT_SAVE, :TCK_ID, :DISC_CODE, SYSDATE)`\r\n    return connection.execute(sql, {CUST_ID: payHistoryObject.CUST_ID, PAY_DET_CODE: payHistoryObject.PAY_DET_CODE,\r\n        PAY_CL_CODE: payHistoryObject.PAY_CL_CODE, POINT_PAY: payHistoryObject.POINT_PAY, DISC_PRICE: payHistoryObject.DISC_PRICE,\r\n        PAY_PRICE: payHistoryObject.PAY_PRICE, POINT_SAVE: payHistoryObject.POINT_SAVE, TCK_ID: payHistoryObject.TCK_ID,\r\n        DISC_CODE: payHistoryObject.DISC_CODE\r\n    }, {autoCommit: false}).then((result) => connection);\r\n}\r\n\r\nfunction createPayHistory(payHistoryObject) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return createPayHistoryExecute(connection, payHistoryObject);\r\n            }).then((connection) => {\r\n            return ticketService.updateTicketStatusToExecute(connection,payHistoryObject.TCK_ID, 'P');\r\n        }).then((connection) => {\r\n            const result = payHistoryObject.POINT_SAVE - payHistoryObject.POINT_PAY;\r\n            return customerService.updatePointOfUserExecute(connection, payHistoryObject.CUST_ID, result, '+');\r\n        }).then((connection) => {\r\n            connection.commit((error) => {\r\n                if(error) {\r\n                    doRelease(connection);\r\n                    console.log(error);\r\n                    reject(error);\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        }).catch((error) => {console.log(error); reject(error)});\r\n    })\r\n}\r\nfunction createPayHistoryOfNonUser(payHistoryObject) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return createPayHistoryExecute(connection, payHistoryObject);\r\n            }).then((connection) => {\r\n            return ticketService.updateTicketStatusToExecute(connection,payHistoryObject.TCK_ID, 'P');\r\n        }).then((connection) => {\r\n            connection.commit((error) => {\r\n                if(error) {\r\n                    doRelease(connection);\r\n                    console.log(error);\r\n                    reject(error);\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        }).catch((error) => {console.log(error); reject(error)});\r\n    })\r\n}\r\nfunction findPayHistoryByTicketId(ticketId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('SELECT * FROM PAY_HISTORY WHERE TCK_ID = :TCK_ID', {TCK_ID: ticketId}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            doRelease(connection);\r\n                            console.log(err);\r\n                            reject(err);\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction findPayHistoryByCustomerId(customerId) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT PH.PAY_STATUS, PD.PAY_DET_CODE_NAME , TO_CHAR(PH.PAY_DATE, 'YYYY-MM-DD') AS PAY_DATE, \r\n                PH.POINT_PAY, PH.POINT_SAVE, DC.DISC_NAME, TP.*\r\n                FROM PAY_HISTORY PH\r\n                JOIN PAY_DETAIL PD ON(PD.PAY_DET_CODE = PH.PAY_DET_CODE)\r\n                JOIN (SELECT T.TCK_ID, T.BOOK_SEAT_CNT,  P.*  FROM TICKET T, PLAY_INFO P WHERE T.SCHED_ID = P.SCHED_ID) TP ON(PH.TCK_ID = TP.TCK_ID)\r\n                LEFT OUTER JOIN DISCOUNT DC ON(PH.DISC_CODE = DC.DISC_CODE)\r\n                WHERE PH.CUST_ID = :CUST_ID ORDER BY PAY_DATE`;\r\n                connection.execute(sql, {CUST_ID: customerId},\r\n                    {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            doRelease(connection);\r\n                            reject('error');\r\n                            console.log('error while findPayHistoryByCustomerId', err);\r\n                            return;\r\n                        }\r\n                        console.log(result);\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            })\r\n    })\r\n}\r\nfunction updatePayHistoryStatusExecute(connection, TCK_ID, PAY_STATUS) {\r\n    return connection.execute('UPDATE PAY_HISTORY SET PAY_STATUS = :PAY_STATUS WHERE TCK_ID = :TCK_ID', {PAY_STATUS: PAY_STATUS, TCK_ID: TCK_ID}, {autoCommit:false})\r\n        .then((result) => connection);\r\n}\r\nfunction refund(payHistoryObject) {\r\n    return new Promise((resolve, reject) => {\r\n        let conn;\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                conn = connection;\r\n                return updatePayHistoryStatusExecute(connection, payHistoryObject.TCK_ID, 'R')\r\n            }).then((connection) => {\r\n            if(payHistoryObject.IS_USER === 'Y') {\r\n                const point = payHistoryObject.POINT_PAY - payHistoryObject.POINT_SAVE;\r\n                return customerService.updatePointOfUserExecute(connection, payHistoryObject.CUST_ID, point, '+');\r\n            }else {\r\n                return connection;\r\n            }\r\n        }).then((connection) => {\r\n            return ticketService.ticketAndBookSeatRefundProcessExecute(connection, payHistoryObject.TCK_ID)\r\n        }).then((connection) => {\r\n            connection.commit((err) => {\r\n                if(err) {\r\n                    doRelease(connection);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                doRelease(connection);\r\n                resolve('success');\r\n            })\r\n        }).catch((error) => {\r\n            if(conn) {\r\n                doRelease(conn);\r\n            }\r\n            console.log(error)\r\n        });\r\n    })\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\nmodule.exports = {\r\n    createPayHistory,\r\n    createPayHistoryOfNonUser,\r\n    findPayHistoryByCustomerId,\r\n    findPayHistoryByTicketId,\r\n    refund\r\n}"]}