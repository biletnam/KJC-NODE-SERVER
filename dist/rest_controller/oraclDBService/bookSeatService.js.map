{"version":3,"sources":["../../../rest_controller/oraclDBService/bookSeatService.js"],"names":["dbConfig","require","oracledb","commonUtil","playTypeService","seatService","firstBatchInsert","connection","scheduleObject","playTypeP","findPlayTypeById","PT_ID","seatsP","findSeatsByCNOAndBIDWithSeatType","CINEMA_NO","BRCH_ID","Promise","all","then","values","playType","seats","bookSeatObjectArray","map","s","SEAT_NAME","BOOK_PRICE","PT_PRICE","ADD_COST","console","log","executeMany","autoCommit","result","findBookSeatByScheduleId","SCHED_ID","resolve","reject","getConnection","connectConfig","execute","Number","outFormat","OBJECT","err","doRelease","rows","catch","error","findBookSeatByScheduleIdAndSeatNames","scheduleId","seatNames","sql","i","join","updateBookSeatTicketAndBookable","ticketId","ticketObject","resetBookSeatTicket","resetBookSeatTickets","ticketIds","deleteBookSeatByScheduleIdExecute","schedId","close","module","exports"],"mappings":"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","file":"bookSeatService.js","sourcesContent":["const dbConfig = require('../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../commonModule/commonUtil');\r\n\r\nconst playTypeService = require('./price/playTypeService');\r\nconst seatService = require('./seatService');\r\n\r\nfunction firstBatchInsert(connection, scheduleObject) {\r\n    const playTypeP = playTypeService.findPlayTypeById(scheduleObject.PT_ID);\r\n    const seatsP = seatService.findSeatsByCNOAndBIDWithSeatType(scheduleObject.CINEMA_NO, scheduleObject.BRCH_ID);\r\n    return Promise.all([playTypeP, seatsP])\r\n        .then((values) => {\r\n            const playType = values[0][0];\r\n            const seats = values[1];\r\n            const bookSeatObjectArray = seats.map((s) => {\r\n                return {SEAT_NAME: s.SEAT_NAME, BOOK_PRICE:playType.PT_PRICE + s.ADD_COST, CINEMA_NO: scheduleObject.CINEMA_NO, BRCH_ID: scheduleObject.BRCH_ID }\r\n            })\r\n            console.log(bookSeatObjectArray);\r\n            return connection.executeMany(`INSERT INTO BOOK_SEAT (SCHED_ID, SEAT_NAME, BOOK_PRICE, CINEMA_NO, BRCH_ID)\r\n            VALUES(SCHEDULE_SEQ.CURRVAL, :SEAT_NAME, :BOOK_PRICE, :CINEMA_NO, :BRCH_ID)`, bookSeatObjectArray, {autoCommit: false}).then((result) => connection)\r\n        })\r\n}\r\nfunction findBookSeatByScheduleId(SCHED_ID) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                connection.execute('SELECT * FROM BOOK_SEAT WHERE SCHED_ID = :SCHED_ID', {SCHED_ID: Number(SCHED_ID)}, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log('error while select', err);\r\n                            doRelease(connection);\r\n                            reject('error');\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            }).catch((error) => console.log(error));\r\n    })\r\n}\r\n\r\nfunction findBookSeatByScheduleIdAndSeatNames(scheduleId, seatNames) {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                const sql = `SELECT * FROM BOOK_SEAT WHERE SCHED_ID = ${scheduleId} AND SEAT_NAME IN (${seatNames.map((s,i) => ':'+i).join(', ')})`;\r\n                connection.execute(sql, seatNames, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            console.log('error while select', err);\r\n                            doRelease(connection);\r\n                            reject('error');\r\n                            return;\r\n                        }\r\n                        doRelease(connection);\r\n                        resolve(result.rows);\r\n                    })\r\n            }).catch((error) => console.log(error));\r\n    })\r\n}\r\nfunction updateBookSeatTicketAndBookable(connection,ticketId, ticketObject) {\r\n    const scheduleId = ticketObject.SCHED_ID;\r\n    const seatNames = ticketObject.seatNames;\r\n    const sql = `UPDATE BOOK_SEAT SET TCK_ID=${ticketId} WHERE SCHED_ID = ${scheduleId} AND SEAT_NAME IN(${seatNames.map((s,i) => ':'+i).join(', ')})`;\r\n    return connection.execute(sql, seatNames, {autoCommit: false, outFormat: oracledb.OBJECT}).then((result) => connection);\r\n}\r\n\r\nfunction resetBookSeatTicket(connection,ticketId) {\r\n    const sql = `UPDATE BOOK_SEAT SET TCK_ID = NULL WHERE TCK_ID = ${ticketId}`;\r\n    console.log(sql);\r\n    return connection.execute(sql,[], {autoCommit: false, outFormat: oracledb.OBJECT}).then((result) => connection);\r\n}\r\n\r\nfunction resetBookSeatTickets(connection,ticketIds) {\r\n    const sql = `UPDATE BOOK_SEAT SET TCK_ID = NULL WHERE TCK_ID IN (${ticketIds.map((s,i) => ':'+ i)})`;\r\n    return connection.execute(sql,ticketIds, {autoCommit: false, outFormat: oracledb.OBJECT}).then((result) => connection);\r\n}\r\n\r\nfunction deleteBookSeatByScheduleIdExecute(connection, schedId) {\r\n    return connection.execute('DELETE FROM BOOK_SEAT WHERE SCHED_ID = :SCHED_ID',{SCHED_ID: schedId}, {autoCommit: false})\r\n        .then((result) => connection);\r\n}\r\nfunction doRelease(connection) {\r\n    return connection.close((err) => {\r\n        if(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    firstBatchInsert,\r\n    findBookSeatByScheduleId,\r\n    findBookSeatByScheduleIdAndSeatNames : findBookSeatByScheduleIdAndSeatNames,\r\n    updateBookSeatTicketAndBookable,\r\n    resetBookSeatTicket,\r\n    resetBookSeatTickets,\r\n    deleteBookSeatByScheduleIdExecute\r\n}"]}