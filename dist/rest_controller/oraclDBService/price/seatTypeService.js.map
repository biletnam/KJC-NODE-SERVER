{"version":3,"sources":["../../../../rest_controller/oraclDBService/price/seatTypeService.js"],"names":["dbConfig","require","oracledb","commonUtil","insertSeatType","seatTypeObject","Promise","resolve","reject","getConnection","connectConfig","then","connection","execute","SEAT_TYPE_NAME","ADD_COST","autoCommit","err","result","defaultPromiseErrorHandler","close","catch","findSeatTypeAll","outFormat","OBJECT","rows","findSeatTypeById","id","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,kCAAR,CAAjB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,aAAaF,QAAQ,kCAAR,CAAnB;;AAEA,IAAMG,iBAAiB,SAAjBA,cAAiB,CAACC,cAAD,EAAoB;AACvC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCN,iBAASO,aAAT,CAAuBT,SAASU,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClB,mBAAOA,WAAWC,OAAX,CAAmB,iFAAnB,EACH,EAACC,gBAAgBT,eAAeS,cAAhC,EAAgDC,UAAUV,eAAeU,QAAzE,EADG,EAEH,EAACC,YAAY,IAAb,EAFG,EAEiB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACjC,oBAAGD,GAAH,EAAQ;AACJd,+BAAWgB,0BAAX,CAAsCF,GAAtC;AACAL,+BAAWQ,KAAX;AACAZ,2BAAOS,GAAP;AACA;AACH;AACDV,wBAAQ,SAAR;AACAK,2BAAWQ,KAAX;AACH,aAXE,CAAP;AAYH,SAdL,EAeKC,KAfL,CAeWlB,WAAWgB,0BAftB;AAgBH,KAjBM,CAAP;AAkBH,CAnBD;AAoBA,IAAMG,kBAAkB,SAAlBA,eAAkB,GAAM;AAC1B,WAAO,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCN,iBAASO,aAAT,CAAuBT,SAASU,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AACd,mBAAOA,WAAWC,OAAX,CAAmB,yBAAnB,EAA8C,EAA9C,EAAkD,EAACU,WAAWrB,SAASsB,MAArB,EAAlD,EACH,UAACP,GAAD,EAAMC,MAAN,EAAiB;AACjB,oBAAGD,GAAH,EAAQ;AACJd,+BAAWgB,0BAAX,CAAsCF,GAAtC;AACAL,+BAAWQ,KAAX;AACAZ,2BAAOS,GAAP;AACA;AACH;AACDV,wBAAQW,OAAOO,IAAf;AACAb,2BAAWQ,KAAX;AACH,aAVM,CAAP;AAWH,SAbT,EAcMC,KAdN,CAcYlB,WAAWgB,0BAdvB;AAeH,KAhBM,CAAP;AAiBH,CAlBD;AAmBA,SAASO,gBAAT,CAA0BC,EAA1B,EAA6B;AACzB,WAAO,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCN,iBAASO,aAAT,CAAuBT,SAASU,aAAhC,EACKC,IADL,CACU,UAACC,UAAD,EAAgB;AAClB,mBAAOA,WAAWC,OAAX,CAAmB,4DAAnB,EAAiFc,EAAjF,EAAqF,EAACJ,WAAWrB,SAASsB,MAArB,EAArF,EACH,UAACP,GAAD,EAAMC,MAAN,EAAiB;AACb,oBAAGD,GAAH,EAAQ;AACJd,+BAAWgB,0BAAX,CAAsCF,GAAtC;AACAL,+BAAWQ,KAAX;AACAZ,2BAAOS,GAAP;AACA;AACH;AACDV,wBAAQW,OAAOO,IAAf;AACAb,2BAAWQ,KAAX;AACH,aAVE,CAAP;AAYH,SAdL,EAcOC,KAdP,CAcalB,WAAWgB,0BAdxB;AAeH,KAhBM,CAAP;AAiBH;;AAEDS,OAAOC,OAAP,GAAiB;AACbzB,kCADa;AAEbkB,oCAFa;AAGbI;AAHa,CAAjB","file":"seatTypeService.js","sourcesContent":["const dbConfig = require('../../../config/oracle-db-config');\r\nconst oracledb = require('oracledb');\r\nconst commonUtil = require('../../../commonModule/commonUtil');\r\n\r\nconst insertSeatType = (seatTypeObject) => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('INSERT INTO SEAT_TYPE VALUES(SEAT_TYPE_SEQ.NEXTVAL, :SEAT_TYPE_NAME, :ADD_COST)',\r\n                    {SEAT_TYPE_NAME: seatTypeObject.SEAT_TYPE_NAME, ADD_COST: seatTypeObject.ADD_COST},\r\n                    {autoCommit: true}, (err, result) => {\r\n                        if(err) {\r\n                            commonUtil.defaultPromiseErrorHandler(err);\r\n                            connection.close();\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        resolve('success');\r\n                        connection.close();\r\n                    })\r\n            })\r\n            .catch(commonUtil.defaultPromiseErrorHandler)\r\n    })\r\n}\r\nconst findSeatTypeAll = () => {\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                    return connection.execute('SELECT * FROM SEAT_TYPE', [], {outFormat: oracledb.OBJECT},\r\n                        (err, result) => {\r\n                        if(err) {\r\n                            commonUtil.defaultPromiseErrorHandler(err);\r\n                            connection.close();\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        resolve(result.rows);\r\n                        connection.close();\r\n                    });\r\n                }\r\n            ).catch(commonUtil.defaultPromiseErrorHandler);\r\n    })\r\n}\r\nfunction findSeatTypeById(id){\r\n    return new Promise((resolve, reject) => {\r\n        oracledb.getConnection(dbConfig.connectConfig)\r\n            .then((connection) => {\r\n                return connection.execute('SELECT * FROM SEAT_TYPE WHERE SEAT_TYPE_ID = :SEAT_TYPE_ID', id, {outFormat: oracledb.OBJECT},\r\n                    (err, result) => {\r\n                        if(err) {\r\n                            commonUtil.defaultPromiseErrorHandler(err);\r\n                            connection.close();\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        resolve(result.rows);\r\n                        connection.close();\r\n                    })\r\n\r\n            }).catch(commonUtil.defaultPromiseErrorHandler);\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    insertSeatType,\r\n    findSeatTypeAll,\r\n    findSeatTypeById\r\n}"]}