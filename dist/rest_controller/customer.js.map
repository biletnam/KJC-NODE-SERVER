{"version":3,"sources":["../../rest_controller/customer.js"],"names":["express","require","router","Router","Joi","multer","path","process","cwd","envModule","jwt","customerService","passwordUtil","loginUtil","commonUtil","defaultErrorHandler","defaultPromiseErrorHandler","get","req","res","result","findCustomers","then","data","send","post","validateUser","body","error","status","details","message","name","id","password","email","birth","phone","zipCode","address","address_detail","addressDetail","passwordObject","makePassword","salt","realPassword","passwordHash","console","log","makeObject","IS_USER","PHONE","USER_NAME","USER_ID","ZIP_CODE","ADDR","ADDR_DET","BIRTH","PASSWORD","SALT","EMAIL","registerUser","params","userIdCheck","row","length","findUserById","user","checkPassword","getToken","token","catch","scheme","string","min","required","validate","module","exports"],"mappings":"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","file":"customer.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst Joi = require('joi');\r\nconst multer = require('multer'); // express에 multer모듈 적용 (for 파일업로드)\r\nvar path = process.cwd();\r\nvar envModule = require( path + '/envModule' );\r\nconst jwt = require('jsonwebtoken');\r\nconst customerService = require('./oraclDBService/customerService');\r\nconst passwordUtil = require('../commonModule/passwordUtil');\r\nconst loginUtil = require('../commonModule/loginUtil');\r\nconst commonUtil = require('../commonModule/commonUtil');\r\n\r\nconst defaultErrorHandler = commonUtil.defaultPromiseErrorHandler;\r\nrouter.get('/', (req, res) => {\r\n    const result = customerService.findCustomers();\r\n    result.then((data) => {\r\n        res.send(data);\r\n    })\r\n})\r\nrouter.post('/user', (req,res) => {\r\n    const {error} = validateUser(req.body);\r\n    if(error) {\r\n        res.status(400).send(error.details[0].message);\r\n        return;\r\n    }\r\n\r\n    const name = req.body.name;\r\n    const id = req.body.id;\r\n    const password = req.body.password;\r\n    const email = req.body.email;\r\n    const birth = req.body.birth;\r\n    const phone = req.body.phone;\r\n    const zipCode = req.body.zipCode;\r\n    const address = req.body.address;\r\n    const address_detail = req.body.addressDetail;\r\n\r\n    const passwordObject = passwordUtil.makePassword(password);\r\n    const salt = passwordObject.salt;\r\n    const realPassword = passwordObject.passwordHash;\r\n    console.log(passwordObject);\r\n    const makeObject = {\r\n        IS_USER: 'Y',\r\n        PHONE: phone,\r\n        USER_NAME: name,\r\n        USER_ID: id,\r\n        ZIP_CODE: zipCode,\r\n        ADDR: address,\r\n        ADDR_DET: address_detail,\r\n        BIRTH: birth,\r\n        PASSWORD: realPassword,\r\n        SALT: salt,\r\n        EMAIL: email\r\n    }\r\n    customerService.registerUser(makeObject)\r\n        .then((data) => res.send(data));\r\n/*    const result  = customerService.registerPeople();\r\n    result.then((data) => {\r\n        res.send(data);\r\n    })*/\r\n})\r\n\r\nrouter.get('/user/:id/check',(req,res) => {\r\n    const id = req.params.id;\r\n    console.log(id);\r\n    customerService.userIdCheck(id).then((row) => {\r\n        console.log(row);\r\n        if(row.length > 0 ) {\r\n            res.send(true);\r\n        }else {\r\n            res.send(false);\r\n        }\r\n    })\r\n});\r\nrouter.get('/user/:id', (req,res) => {\r\n    const id = req.params.id;\r\n    customerService\r\n        .findUserById(id)\r\n        .then((data) => {res.send(data)});\r\n});\r\nrouter.post('/user/login', (req, res) => {\r\n        const body = req.body;\r\n        if(!body || !body.id || !body.password) {\r\n            res.status(405).send('Bad Request');\r\n            return;\r\n        }\r\n        customerService.findUserById(body.id)\r\n            .then((data) => {\r\n                if(data.length === 0) {\r\n                    res.status(404).send('there is no User of this ID');\r\n                    return;\r\n                }\r\n                const user = data[0];\r\n                console.log(user);\r\n                const result = passwordUtil.checkPassword(body.password, user.SALT, user.PASSWORD);\r\n                if(result) {\r\n                    loginUtil\r\n                        .getToken(user)\r\n                        .then((token) => {\r\n                            res.send({token: token, message: 'loginSuccess'});\r\n                        })\r\n                        .catch(defaultErrorHandler);\r\n                }else {\r\n                    res.send(400).send('로그인에 실패했습니다.')\r\n                }\r\n            }).catch(defaultErrorHandler);\r\n    }\r\n)\r\n\r\nfunction validateUser(user) {\r\n    const scheme = {\r\n        name: Joi.string().min(3).required(),\r\n        id: Joi.string().min(1),\r\n        password: Joi.string().min(1).required(),\r\n        zipCode: Joi.string().min(1).required(),\r\n        email: Joi.string().min(1).required(),\r\n        birth: Joi.string().min(5).required(),\r\n        phone: Joi.string().min(1).required(),\r\n        address: Joi.string().min(1).required(),\r\n        address_detail:Joi.string().min(1).required(),\r\n    }\r\n    //\t\tminAge: Joi.number().required(),\r\n    return Joi.validate(user,scheme);\r\n}\r\nmodule.exports = router;"]}