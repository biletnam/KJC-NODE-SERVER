{"version":3,"sources":["../../rest_controller/login.js"],"names":["express","require","router","Router","jwt","customerService","passwordUtil","loginUtil","commonUtil","get","req","res","token","headers","query","status","json","success","message","console","log","p","Promise","resolve","reject","verify","app","err","decoded","respond","isUser","info","id","_id","name","username","onError","error","then","catch","post","body","password","send","findUserById","data","length","user","result","checkPassword","SALT","PASSWORD","getToken","defaultPromiseErrorHandler","tokenRespondForNonUser","customer","getTokenForNonUser","registerNonUserCustomerAndLoginRespond","registerNonUser","USER_NAME","PHONE","phone","nonUserObject","findNonUserCustomerByNameAndPhone","removeImportantData","userInformation","important","map","key","tokenCheckPromise","IS_USER","CUST_ID","_c_id","findUserByCustomerId","module","exports"],"mappings":"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","file":"login.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst jwt = require('jsonwebtoken');\r\nconst customerService = require('./oraclDBService/customerService');\r\nconst passwordUtil = require('../commonModule/passwordUtil');\r\nconst loginUtil = require('../commonModule/loginUtil');\r\nconst commonUtil = require('../commonModule/commonUtil');\r\n\r\nrouter.get('/check', (req, res) => {\r\n    const token = req.headers['x-access-token'] || req.query.token;\r\n    // token does not exist\r\n    if(!token) {\r\n        return res.status(403).json({\r\n            success: false,\r\n            message: 'not logged in'\r\n        })\r\n    }\r\n    console.log(token);\r\n\r\n    // create a promise that decodes the token\r\n    const p = new Promise(\r\n        (resolve, reject) => {\r\n            console.log('here you promise');\r\n            jwt.verify(token, req.app.get('jwt-secret'), (err, decoded) => {\r\n                console.log(decoded);\r\n                if(err) reject(err);\r\n                resolve(decoded)\r\n            })\r\n        }\r\n    )\r\n\r\n    // if token is valid, it will respond with its info\r\n    const respond = (token) => {\r\n        if(token.isUser) {\r\n            res.json({\r\n                success: true,\r\n                info: {\r\n                    id: token._id,\r\n                    name: token.username\r\n                }\r\n            })\r\n        }else {\r\n            res.json({\r\n                success: true,\r\n                info: {\r\n                    name: token.username\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // if it has failed to verify, it will return an error message\r\n    const onError = (error) => {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: error.message\r\n        })\r\n    }\r\n\r\n    // process the promise\r\n    p.then(respond).catch(onError)\r\n});\r\n\r\nrouter.post('/', (req, res) => {\r\n        const body = req.body;\r\n        if(!body || !body.id || !body.password) {\r\n            console.log('login bad request');\r\n            res.status(405).send('Bad Request');\r\n            return;\r\n        }\r\n        customerService.findUserById(body.id)\r\n            .then((data) => {\r\n                if(data.length === 0) {\r\n                    res.status(404).send('there is no User of this ID');\r\n                    return;\r\n                }\r\n                const user = data[0];\r\n                console.log(user);\r\n                const result = passwordUtil.checkPassword(body.password, user.SALT, user.PASSWORD);\r\n                if(result) {\r\n                    loginUtil\r\n                        .getToken(user)\r\n                        .then((token) => {\r\n                            res.send({token: token, message: 'loginSuccess'});\r\n                        })\r\n                        .catch(commonUtil.defaultPromiseErrorHandler);\r\n                }else {\r\n                    res.status(400).send('로그인에 실패했습니다.')\r\n                }\r\n            }).catch(commonUtil.defaultPromiseErrorHandler);\r\n    }\r\n);\r\nconst tokenRespondForNonUser = (req, res, customer) => {\r\n    loginUtil.getTokenForNonUser(customer)\r\n        .then((token) => {\r\n            res.send({token: token, message: 'loginSuccess'}); // here send token\r\n        }).catch(commonUtil.defaultPromiseErrorHandler);\r\n}\r\nconst registerNonUserCustomerAndLoginRespond = (req, res) => {\r\n    customerService.registerNonUser({USER_NAME: req.body.name, PHONE: req.body.phone})\r\n        .then((nonUserObject) => {\r\n            return customerService.findNonUserCustomerByNameAndPhone(nonUserObject.USER_NAME, nonUserObject.PHONE)\r\n                .then((data) => {\r\n                    if(data.length > 0) {\r\n                        tokenRespondForNonUser(req,res, data[0]);\r\n                    } else {\r\n                        res.status(500).send('error');\r\n                    }\r\n                })\r\n        }).catch(commonUtil.defaultPromiseErrorHandler);\r\n}\r\nrouter.post('/nonUser', (req,res) => {\r\n    const body = req.body;\r\n    if(!body || !body.name || !body.phone) {\r\n        console.log('login bad request');\r\n        res.status(405).send('Bad Request');\r\n        return;\r\n    }\r\n    let customer;\r\n    console.log(req.body.name, req.body.phone);\r\n    customerService.findNonUserCustomerByNameAndPhone(body.name, body.phone).then((data) => {\r\n        if(data.length > 0) {\r\n            customer = data[0];\r\n            tokenRespondForNonUser(req,res, customer);\r\n            return;\r\n        }else {\r\n            registerNonUserCustomerAndLoginRespond(req,res);\r\n            return;\r\n        }\r\n    }).catch(commonUtil.defaultPromiseErrorHandler);\r\n})\r\nconst removeImportantData = (userInformation) => {\r\n    const important = ['CUST_ID', 'SALT', 'PASSWORD'];\r\n    important.map((key) => {\r\n        delete userInformation[key];\r\n    });\r\n    return userInformation;\r\n}\r\nrouter.get('/info', (req,res) => {\r\n    console.log('get Info Request');\r\n    loginUtil.tokenCheckPromise(req)\r\n        .then((decoded) => {\r\n            if(!decoded.isUser) {\r\n                console.log('non User here');\r\n                res.send({IS_USER: 'N'});\r\n                return;\r\n            }\r\n            const CUST_ID = decoded._c_id;\r\n            customerService.findUserByCustomerId(CUST_ID)\r\n                .then((data) => {\r\n                    if(!data || data.length === 0 ) {\r\n                      res.status(400).send('no User Information');\r\n                      return;\r\n                    }\r\n                    const userInformation = data[0];\r\n                    res.send(removeImportantData(userInformation))\r\n                }).catch(commonUtil.defaultPromiseErrorHandler);\r\n        }).catch(commonUtil.defaultPromiseErrorHandler);\r\n})\r\n\r\nmodule.exports = router;"]}