{"version":3,"sources":["../../commonModule/loginUtil.js"],"names":["jwt","require","secret","getToken","userData","p","Promise","resolve","reject","sign","_id","USER_ID","username","USER_NAME","_c_id","CUST_ID","isUser","expiresIn","issuer","err","token","getTokenForNonUser","nonUserData","name","phone","PHONE","tokenCheckPromise","req","headers","query","verify","app","get","decoded","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,cAAR,CAAZ;AACA,IAAMC,SAASD,QAAQ,4BAAR,EAAsCC,MAArD;;AAEA,IAAMC,WAAW,SAAXA,QAAW,CAACC,QAAD,EAAc;AAC3B,QAAMC,IAAI,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCR,YAAIS,IAAJ,CAAS;AACLC,iBAAKN,SAASO,OADT;AAELC,sBAAUR,SAASS,SAFd;AAGLC,mBAAOV,SAASW,OAHX;AAILC,oBAAQ;AAJH,SAAT,EAKGd,MALH,EAKW;AACPe,uBAAW,IADJ;AAEPC,oBAAQ;AAFD,SALX,EAQG,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACf,gBAAGD,GAAH,EAAQX,OAAOW,GAAP;AACRZ,oBAAQa,KAAR;AACH,SAXD;AAYH,KAbS,CAAV;AAcA,WAAOf,CAAP;AACH,CAhBD;AAiBA,IAAMgB,qBAAqB,SAArBA,kBAAqB,CAACC,WAAD,EAAiB;AACxC,QAAMjB,IAAI,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCR,YAAIS,IAAJ,CAAS;AACLc,kBAAMD,YAAYT,SADb;AAELW,mBAAOF,YAAYG,KAFd;AAGLX,mBAAOQ,YAAYP,OAHd;AAILC,oBAAQ;AAJH,SAAT,EAKGd,MALH,EAKW;AACPe,uBAAW,IADJ;AAEPC,oBAAQ;AAFD,SALX,EAQG,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACf,gBAAID,GAAJ,EAASX,OAAOW,GAAP;AACTZ,oBAAQa,KAAR;AACH,SAXD;AAYH,KAbS,CAAV;AAcA,WAAOf,CAAP;AACH,CAhBD;AAiBA,IAAMqB,oBAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AAC/B,QAAMP,QAAQO,IAAIC,OAAJ,CAAY,gBAAZ,KAAiCD,IAAIE,KAAJ,CAAUT,KAAzD;;AAEA;AACA,QAAMf,IAAI,IAAIC,OAAJ,CACN,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjB,YAAG,CAACY,KAAJ,EAAW;AACPZ,mBAAO,KAAP;AACH;AACDR,YAAI8B,MAAJ,CAAWV,KAAX,EAAkBO,IAAII,GAAJ,CAAQC,GAAR,CAAY,YAAZ,CAAlB,EAA6C,UAACb,GAAD,EAAMc,OAAN,EAAkB;AAC3D,gBAAGd,GAAH,EAAQX,OAAOW,GAAP;AACRZ,oBAAQ0B,OAAR;AACH,SAHD;AAIH,KATK,CAAV;AAWA;AACA,WAAO5B,CAAP;AACH,CAjBD;AAkBA6B,OAAOC,OAAP,GAAiB;AACbhC,sBADa;AAEbuB,wCAFa;AAGbL;AAHa,CAAjB","file":"loginUtil.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst secret = require('../config/oracle-db-config').secret;\r\n\r\nconst getToken = (userData) => {\r\n    const p = new Promise((resolve, reject) => {\r\n        jwt.sign({\r\n            _id: userData.USER_ID,\r\n            username: userData.USER_NAME,\r\n            _c_id: userData.CUST_ID,\r\n            isUser: true\r\n        }, secret, {\r\n            expiresIn: '7d',\r\n            issuer: 'localhost'\r\n        }, (err, token) => {\r\n            if(err) reject(err);\r\n            resolve(token);\r\n        })\r\n    })\r\n    return p;\r\n}\r\nconst getTokenForNonUser = (nonUserData) => {\r\n    const p = new Promise((resolve, reject) => {\r\n        jwt.sign({\r\n            name: nonUserData.USER_NAME,\r\n            phone: nonUserData.PHONE,\r\n            _c_id: nonUserData.CUST_ID,\r\n            isUser: false\r\n        }, secret, {\r\n            expiresIn: '7d',\r\n            issuer: 'localhost'\r\n        }, (err, token) => {\r\n            if (err) reject(err);\r\n            resolve(token);\r\n        })\r\n    });\r\n    return p;\r\n}\r\nconst tokenCheckPromise = (req) => {\r\n    const token = req.headers['x-access-token'] || req.query.token\r\n\r\n    // create a promise that decodes the token\r\n    const p = new Promise(\r\n        (resolve, reject) => {\r\n            if(!token) {\r\n                reject(false);\r\n            }\r\n            jwt.verify(token, req.app.get('jwt-secret'), (err, decoded) => {\r\n                if(err) reject(err);\r\n                resolve(decoded)\r\n            })\r\n        }\r\n    )\r\n    // process the promise\r\n    return p;\r\n}\r\nmodule.exports = {\r\n    getToken,\r\n    tokenCheckPromise,\r\n    getTokenForNonUser\r\n}"]}